import { describe, it, expect } from '@jest/globals';
import Debug from './debug';
import { newDeep } from './deep';

const debug = Debug('query:test');

// –¢–µ—Å—Ç–æ–≤—ã–π –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ QUERY2.md
function makeDataset(deep: any) {
  debug('üèóÔ∏è Creating test dataset');
  
  // –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã
  const A = new deep();
  const a1 = new deep();
  const a2 = new deep();
  a1.type = A;
  a2.type = A;
  
  const B = new deep();
  const b1 = new deep();
  const b2 = new deep();
  b1.type = B;
  b2.type = B;
  b1.from = a1;
  b2.from = a1;
  
  const C = new deep();
  const c1 = new deep();
  const c2 = new deep();
  c1.type = C;
  c2.type = C;
  c1.to = a2;
  c2.to = a2;
  
  const str = new deep.String('abc');
  const D = new deep();
  const d1 = new deep();
  const d2 = new deep();
  d1.type = D;
  d2.type = D;
  d1.value = str;
  d2.value = str;
  
  debug('‚úÖ Test dataset created');
  return { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str };
}

describe('manyRelation', () => {
  let deep: any;
  
  beforeEach(() => {
    debug('üß™ Setting up test environment for manyRelation');
    deep = newDeep();
  });
  
  describe('type relation', () => {
    it('should handle single type relation with tracking', () => {
      const { A, a1, a2 } = makeDataset(deep);
      
      // –ê–∫—Å–∏–æ–º–∞: a1.type –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∏–ø –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ A –ª–∏–±–æ undefined
      expect(a1.type._id).toBe(A._id);
      
      // –ê–∫—Å–∏–æ–º–∞: a1.manyRelation('type') –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å { A }
      const a1TypeSet = a1.manyRelation('type');
      expect(a1TypeSet.type.is(deep.Set)).toBe(true);
      expect(a1TypeSet.size).toBe(1);
      expect(a1TypeSet.has(A)).toBe(true);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞ - –∏–∑–º–µ–Ω–µ–Ω–∏–µ type –¥–æ–ª–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      let typeSetChanged = false;
      let addedElement = null;
      let deletedElement = null;
      
      a1TypeSet.on(deep.events.dataAdd, (element) => {
        addedElement = element;
        typeSetChanged = true;
      });
      
      a1TypeSet.on(deep.events.dataDelete, (element) => {
        deletedElement = element;  
        typeSetChanged = true;
      });
      
      // –ò–∑–º–µ–Ω—è–µ–º —Ç–∏–ø –Ω–∞ –Ω–æ–≤—ã–π
      const Y = new deep();
      a1.type = Y;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–∏–ª—Å—è
      expect(a1TypeSet.size).toBe(1);
      expect(a1TypeSet.has(Y)).toBe(true);
      expect(a1TypeSet.has(A)).toBe(false);
      expect(typeSetChanged).toBe(true);
      expect(addedElement).toBeTruthy();
      expect(deletedElement).toBeTruthy();
      
      debug('‚úÖ type relation tracking works correctly');
    });
  });
  
  describe('typed relation', () => {
    it('should handle multiple typed relation with tracking', () => {
      const { A, a1, a2 } = makeDataset(deep);
      
      // –ê–∫—Å–∏–æ–º–∞: A.typed –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ—Ç —Ç–µ—Ö –∫—Ç–æ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–∞–Ω–Ω–æ–π –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–µ–π { a1, a2 }
      const ATypedSet = A.manyRelation('typed');
      expect(ATypedSet.type.is(deep.Set)).toBe(true);
      expect(ATypedSet.size).toBe(2);
      expect(ATypedSet.has(a1)).toBe(true);
      expect(ATypedSet.has(a2)).toBe(true);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞ - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Ç–∏–ø–∞ A
      let addedElement = null;
      ATypedSet.on(deep.events.dataAdd, (element) => {
        addedElement = element;
      });
      
      const a3 = new deep();
      a3.type = A;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–æ–±–∞–≤–∏–ª—Å—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      expect(ATypedSet.size).toBe(3);
      expect(ATypedSet.has(a3)).toBe(true);
      expect(addedElement).toBeTruthy();
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞ - —É–¥–∞–ª–µ–Ω–∏–µ —Å–≤—è–∑–∏ type
      let deletedElement = null;
      ATypedSet.on(deep.events.dataDelete, (element) => {
        deletedElement = element;
      });
      
      delete a1.type;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç —É–¥–∞–ª–∏–ª—Å—è –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      expect(ATypedSet.size).toBe(2);
      expect(ATypedSet.has(a1)).toBe(false);
      expect(ATypedSet.has(a2)).toBe(true);
      expect(ATypedSet.has(a3)).toBe(true);
      expect(deletedElement).toBeTruthy();
      
      debug('‚úÖ typed relation tracking works correctly');
    });
  });
  
  describe('from/out relation', () => {
    it('should handle from/out relation with tracking', () => {
      const { a1, B, b1, b2 } = makeDataset(deep);
      
      // –ê–∫—Å–∏–æ–º–∞: b1.from –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ –∫—É–¥–∞ –¥–∞–Ω–Ω–∞—è –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è —Å—Å—ã–ª–∞–µ—Ç—Å—è –∫–∞–∫ –Ω–∞ from - a1 –∏–ª–∏ undefined
      expect(b1.from._id).toBe(a1._id);
      
      // –ê–∫—Å–∏–æ–º–∞: b1.manyRelation('from') –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å { a1 }
      const b1FromSet = b1.manyRelation('from');
      expect(b1FromSet.type.is(deep.Set)).toBe(true);
      expect(b1FromSet.size).toBe(1);
      expect(b1FromSet.has(a1)).toBe(true);
      
      // –ê–∫—Å–∏–æ–º–∞: a1.out –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ—Ç —Ç–µ—Ö –∫—Ç–æ —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –¥–∞–Ω–Ω—É—é –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—é –∫–∞–∫ –Ω–∞ from { b1, b2 }
      const a1OutSet = a1.manyRelation('out');
      expect(a1OutSet.type.is(deep.Set)).toBe(true);
      expect(a1OutSet.size).toBe(2);
      expect(a1OutSet.has(b1)).toBe(true);
      expect(a1OutSet.has(b2)).toBe(true);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞ - –∏–∑–º–µ–Ω–µ–Ω–∏–µ from –¥–æ–ª–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      let fromSetChanged = false;
      let outSetChanged = false;
      
      b1FromSet.on(deep.events.dataChanged, () => { fromSetChanged = true; });
      a1OutSet.on(deep.events.dataChanged, () => { outSetChanged = true; });
      
      const newTarget = new deep();
      b1.from = newTarget;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
      expect(b1FromSet.has(newTarget)).toBe(true);
      expect(b1FromSet.has(a1)).toBe(false);
      expect(a1OutSet.has(b1)).toBe(false);
      expect(fromSetChanged).toBe(true);
      expect(outSetChanged).toBe(true);
      
      debug('‚úÖ from/out relation tracking works correctly');
    });
  });
  
  describe('to/in relation', () => {
    it('should handle to/in relation with tracking', () => {
      const { a2, C, c1, c2 } = makeDataset(deep);
      
      // –ê–∫—Å–∏–æ–º–∞: c1.to –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ –∫—É–¥–∞ –¥–∞–Ω–Ω–∞—è –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è —Å—Å—ã–ª–∞–µ—Ç—Å—è –∫–∞–∫ –Ω–∞ to - a2 –∏–ª–∏ undefined
      expect(c1.to._id).toBe(a2._id);
      
      // –ê–∫—Å–∏–æ–º–∞: c1.manyRelation('to') –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å { a2 }
      const c1ToSet = c1.manyRelation('to');
      expect(c1ToSet.type.is(deep.Set)).toBe(true);
      expect(c1ToSet.size).toBe(1);
      expect(c1ToSet.has(a2)).toBe(true);
      
      // –ê–∫—Å–∏–æ–º–∞: a2.in –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ—Ç —Ç–µ—Ö –∫—Ç–æ —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –¥–∞–Ω–Ω—É—é –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—é –∫–∞–∫ –Ω–∞ to { c1, c2 }
      const a2InSet = a2.manyRelation('in');
      expect(a2InSet.type.is(deep.Set)).toBe(true);
      expect(a2InSet.size).toBe(2);
      expect(a2InSet.has(c1)).toBe(true);
      expect(a2InSet.has(c2)).toBe(true);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞ - —É–¥–∞–ª–µ–Ω–∏–µ to –¥–æ–ª–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      let toSetChanged = false;
      let inSetChanged = false;
      
      c1ToSet.on(deep.events.dataChanged, () => { toSetChanged = true; });
      a2InSet.on(deep.events.dataChanged, () => { inSetChanged = true; });
      
      delete c1.to;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
      expect(c1ToSet.size).toBe(0);
      expect(a2InSet.has(c1)).toBe(false);
      expect(a2InSet.has(c2)).toBe(true);
      expect(toSetChanged).toBe(true);
      expect(inSetChanged).toBe(true);
      
      debug('‚úÖ to/in relation tracking works correctly');
    });
  });
  
  describe('value/valued relation', () => {
    it('should handle value/valued relation with tracking', () => {
      const { str, D, d1, d2 } = makeDataset(deep);
      
      // –ê–∫—Å–∏–æ–º–∞: d1.value –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ –∫—É–¥–∞ –¥–∞–Ω–Ω–∞—è –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è —Å—Å—ã–ª–∞–µ—Ç—Å—è –∫–∞–∫ –Ω–∞ .value - str –∏–ª–∏ undefined
      expect(d1.value._id).toBe(str._id);
      
      // –ê–∫—Å–∏–æ–º–∞: d1.manyRelation('value') –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å { str }
      const d1ValueSet = d1.manyRelation('value');
      expect(d1ValueSet.type.is(deep.Set)).toBe(true);
      expect(d1ValueSet.size).toBe(1);
      expect(d1ValueSet.has(str)).toBe(true);
      
      // –ê–∫—Å–∏–æ–º–∞: str.valued –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ—Ç —Ç–µ—Ö –∫—Ç–æ —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –¥–∞–Ω–Ω—É—é –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—é –∫–∞–∫ –Ω–∞ value { d1, d2 }
      const strValuedSet = str.manyRelation('valued');
      expect(strValuedSet.type.is(deep.Set)).toBe(true);
      expect(strValuedSet.size).toBe(2);
      expect(strValuedSet.has(d1)).toBe(true);
      expect(strValuedSet.has(d2)).toBe(true);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞ - —É–¥–∞–ª–µ–Ω–∏–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ value
      let valueSetChanged = false;
      let valuedSetChanged = false;
      
      d1ValueSet.on(deep.events.dataChanged, () => { valueSetChanged = true; });
      strValuedSet.on(deep.events.dataChanged, () => { valuedSetChanged = true; });
      
      // –£–¥–∞–ª—è–µ–º value
      delete d1.value;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ d1 –∏—Å—á–µ–∑ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      expect(d1ValueSet.size).toBe(0);
      expect(strValuedSet.has(d1)).toBe(false);
      expect(strValuedSet.has(d2)).toBe(true);
      expect(valueSetChanged).toBe(true);
      expect(valuedSetChanged).toBe(true);
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º value
      valueSetChanged = false;
      valuedSetChanged = false;
      
      d1.value = str;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ d1 –≤–µ—Ä–Ω—É–ª—Å—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      expect(d1ValueSet.size).toBe(1);
      expect(d1ValueSet.has(str)).toBe(true);
      expect(strValuedSet.has(d1)).toBe(true);
      expect(valueSetChanged).toBe(true);
      expect(valuedSetChanged).toBe(true);
      
      debug('‚úÖ value/valued relation tracking works correctly');
    });
  });
});

describe('mapByField', () => {
  let deep: any;
  
  beforeEach(() => {
    debug('üß™ Setting up test environment for mapByField');
    deep = newDeep();
  });
  
  it('should map relation field and work with deep.Or', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);
    
    // –ê–∫—Å–∏–æ–º–∞: testDeepSet = a1.manyRelation('out') { b1, b2 }
    const a1OutSet = a1.manyRelation('out');
    expect(a1OutSet.type.is(deep.Set)).toBe(true);
    expect(a1OutSet.size).toBe(2);
    expect(a1OutSet.has(b1)).toBe(true);
    expect(a1OutSet.has(b2)).toBe(true);
    
    // –ê–∫—Å–∏–æ–º–∞: mappedByField = testDeepSet.mapByField('from') => { { a1 }, { a1 } }
    // –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–µ—Ç–∞ (b1, b2) –¥–∞–µ—Ç —Å–≤–æ–π manyRelation('from') —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    debug('üß™ Testing mapByField on a1.out set with field "from"');
    const mappedByField = a1OutSet.mapByField('from');
    
    // –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å Deep.Set —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ manyRelation('from')
    // b1.manyRelation('from') = { a1 }
    // b2.manyRelation('from') = { a1 }
    // –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Or = { a1 }
    expect(mappedByField.type.is(deep.Set)).toBe(true);
    expect(mappedByField.size).toBe(1);
    expect(mappedByField.has(a1)).toBe(true);
    
    debug('‚úÖ mapByField basic functionality works correctly');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞ - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∏—Å—Ö–æ–¥–Ω—ã–π —Å–µ—Ç
    let mappedChanged = false;
    mappedByField.on(deep.events.dataChanged, () => { mappedChanged = true; });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç b3 —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ a2
    const b3 = new deep();
    b3.type = B;
    b3.from = a2;
    
    // –î–æ–±–∞–≤–ª—è–µ–º b3 –≤ –∏—Å—Ö–æ–¥–Ω—ã–π —Å–µ—Ç a1OutSet (—ç–º—É–ª–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ out)
    a1OutSet.add(b3);
    
    // –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–∏—Ç—å—Å—è: —Ç–µ–ø–µ—Ä—å { a1, a2 }
    expect(mappedByField.size).toBe(2);
    expect(mappedByField.has(a1)).toBe(true);
    expect(mappedByField.has(a2)).toBe(true);
    expect(mappedChanged).toBe(true);
    
    debug('‚úÖ mapByField tracking works correctly');
  });
  
  it('should handle different relation fields', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);
    
    // –¢–µ—Å—Ç —Å 'type' –ø–æ–ª–µ–º
    const instancesSet = new deep.Set(new Set([a1._symbol, a2._symbol]));
    const typesResult = instancesSet.mapByField('type');
    
    expect(typesResult.type.is(deep.Set)).toBe(true);
    expect(typesResult.size).toBe(1);
    expect(typesResult.has(A)).toBe(true);
    
    // –¢–µ—Å—Ç —Å 'value' –ø–æ–ª–µ–º
    const valueLinksSet = new deep.Set(new Set([d1._symbol, d2._symbol]));
    const valuesResult = valueLinksSet.mapByField('value');
    
    expect(valuesResult.type.is(deep.Set)).toBe(true);
    expect(valuesResult.size).toBe(1);
    expect(valuesResult.has(str)).toBe(true);
    
    debug('‚úÖ mapByField works with different relation fields');
  });
  
  it('should handle empty sets', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);
    
    const emptySet = new deep.Set(new Set());
    const emptyResult = emptySet.mapByField('type');
    
    expect(emptyResult.type.is(deep.Set)).toBe(true);
    expect(emptyResult.size).toBe(0);
    
    debug('‚úÖ mapByField handles empty sets correctly');
  });
  
  it('should handle all inverted field combinations', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø–æ–ª–µ–π –∏ –∏—Ö –∏–Ω–≤–µ—Ä—Å–∏–π
    
    // type -> typed: { a1, a2 }.mapByField('type') => { A }
    const instancesSet = new deep.Set(new Set([a1._symbol, a2._symbol]));
    const typesResult = instancesSet.mapByField('type');
    expect(typesResult.size).toBe(1);
    expect(typesResult.has(A)).toBe(true);
    
    // typed -> type: { A }.mapByField('typed') => { a1, a2 }
    const typesSet = new deep.Set(new Set([A._symbol]));
    const instancesResult = typesSet.mapByField('typed');
    expect(instancesResult.size).toBe(2);
    expect(instancesResult.has(a1)).toBe(true);
    expect(instancesResult.has(a2)).toBe(true);
    
    // from -> out: { b1, b2 }.mapByField('from') => { a1 }
    const fromLinksSet = new deep.Set(new Set([b1._symbol, b2._symbol]));
    const fromTargetsResult = fromLinksSet.mapByField('from');
    expect(fromTargetsResult.size).toBe(1);
    expect(fromTargetsResult.has(a1)).toBe(true);
    
    // out -> from: { a1 }.mapByField('out') => { b1, b2 }
    const fromTargetsSet = new deep.Set(new Set([a1._symbol]));
    const fromLinksResult = fromTargetsSet.mapByField('out');
    expect(fromLinksResult.size).toBe(2);
    expect(fromLinksResult.has(b1)).toBe(true);
    expect(fromLinksResult.has(b2)).toBe(true);
    
    // to -> in: { c1, c2 }.mapByField('to') => { a2 }
    const toLinksSet = new deep.Set(new Set([c1._symbol, c2._symbol]));
    const toTargetsResult = toLinksSet.mapByField('to');
    expect(toTargetsResult.size).toBe(1);
    expect(toTargetsResult.has(a2)).toBe(true);
    
    // in -> to: { a2 }.mapByField('in') => { c1, c2 }
    const toTargetsSet = new deep.Set(new Set([a2._symbol]));
    const toLinksResult = toTargetsSet.mapByField('in');
    expect(toLinksResult.size).toBe(2);
    expect(toLinksResult.has(c1)).toBe(true);
    expect(toLinksResult.has(c2)).toBe(true);
    
    // value -> valued: { d1, d2 }.mapByField('value') => { str }
    const valueLinksSet = new deep.Set(new Set([d1._symbol, d2._symbol]));
    const valueTargetsResult = valueLinksSet.mapByField('value');
    expect(valueTargetsResult.size).toBe(1);
    expect(valueTargetsResult.has(str)).toBe(true);
    
    // valued -> value: { str }.mapByField('valued') => { d1, d2 }
    const valueTargetsSet = new deep.Set(new Set([str._symbol]));
    const valueLinksResult = valueTargetsSet.mapByField('valued');
    expect(valueLinksResult.size).toBe(2);
    expect(valueLinksResult.has(d1)).toBe(true);
    expect(valueLinksResult.has(d2)).toBe(true);
    
    debug('‚úÖ mapByField handles all inverted field combinations correctly');
  });
  
  it('should handle complex tracking scenarios', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å–µ—Ç –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è mapByField
    const dynamicSet = new deep.Set(new Set([b1._symbol]));
    const mappedResult = dynamicSet.mapByField('from');
    
    // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ: { b1 }.mapByField('from') => { a1 }
    expect(mappedResult.size).toBe(1);
    expect(mappedResult.has(a1)).toBe(true);
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    let addedElements: any[] = [];
    let deletedElements: any[] = [];
    
    mappedResult.on(deep.events.dataAdd, (...elements: any[]) => {
      addedElements.push(...elements);
    });
    
    mappedResult.on(deep.events.dataDelete, (...elements: any[]) => {
      deletedElements.push(...elements);
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º b2 –≤ –∏—Å—Ö–æ–¥–Ω—ã–π —Å–µ—Ç: { b1, b2 }.mapByField('from') => { a1 }
    // –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –∏–∑–º–µ–Ω–∏—Ç—å—Å—è, —Ç–∞–∫ –∫–∞–∫ b2.from —Ç–æ–∂–µ a1
    dynamicSet.add(b2);
    expect(mappedResult.size).toBe(1);
    expect(mappedResult.has(a1)).toBe(true);
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–≤—è–∑—å b3 —Å –¥—Ä—É–≥–∏–º from
    const b3 = new deep();
    b3.type = B;
    b3.from = a2;
    
    // –î–æ–±–∞–≤–ª—è–µ–º b3: { b1, b2, b3 }.mapByField('from') => { a1, a2 }
    dynamicSet.add(b3);
    expect(mappedResult.size).toBe(2);
    expect(mappedResult.has(a1)).toBe(true);
    expect(mappedResult.has(a2)).toBe(true);
    expect(addedElements.length).toBe(1);
    expect(addedElements[0]._id).toBe(a2._id);
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ b1, b2 (–æ–±–∞ —Å—Å—ã–ª–∞—é—Ç—Å—è –Ω–∞ a1): { b3 }.mapByField('from') => { a2 }
    dynamicSet.delete(b1);
    dynamicSet.delete(b2);
    expect(mappedResult.size).toBe(1);
    expect(mappedResult.has(a2)).toBe(true);
    expect(mappedResult.has(a1)).toBe(false);
    expect(deletedElements.length).toBe(1);
    expect(deletedElements[0]._id).toBe(a1._id);
    
    // –ò–∑–º–µ–Ω—è–µ–º from —É b3: b3.from = a1
    addedElements = [];
    deletedElements = [];
    b3.from = a1;
    
    // –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω —Å—Ç–∞—Ç—å { a1 }
    expect(mappedResult.size).toBe(1);
    expect(mappedResult.has(a1)).toBe(true);
    expect(mappedResult.has(a2)).toBe(false);
    
    debug('‚úÖ mapByField handles complex tracking scenarios correctly');
  });
  
  it('should handle multiple different results', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);
    
    // –°–æ–∑–¥–∞–µ–º —Å–º–µ—à–∞–Ω–Ω—ã–π —Å–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏
    const str2 = new deep.String('xyz');
    const d3 = new deep();
    d3.type = D;
    d3.value = str2;
    
    // –°–µ—Ç —Å–æ —Å–≤—è–∑—è–º–∏ –Ω–∞ —Ä–∞–∑–Ω—ã–µ value: { d1, d2, d3 }
    // d1.value = str, d2.value = str, d3.value = str2
    const mixedValueSet = new deep.Set(new Set([d1._symbol, d2._symbol, d3._symbol]));
    const valuesResult = mixedValueSet.mapByField('value');
    
    // –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–±–∞ string: { str, str2 }
    expect(valuesResult.size).toBe(2);
    expect(valuesResult.has(str)).toBe(true);
    expect(valuesResult.has(str2)).toBe(true);
    
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏
    const Y = new deep();
    const y1 = new deep();
    y1.type = Y;
    
    // –°–µ—Ç —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤: { a1, y1 }
    const mixedTypesSet = new deep.Set(new Set([a1._symbol, y1._symbol]));
    const typesResult = mixedTypesSet.mapByField('type');
    
    // –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–±–∞ —Ç–∏–ø–∞: { A, Y }
    expect(typesResult.size).toBe(2);
    expect(typesResult.has(A)).toBe(true);
    expect(typesResult.has(Y)).toBe(true);
    
    debug('‚úÖ mapByField handles multiple different results correctly');
  });
  
  it('should handle element destruction gracefully', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);
    
    // –°–æ–∑–¥–∞–µ–º —Å–µ—Ç –∏ mapByField —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const sourceSet = new deep.Set(new Set([b1._symbol, b2._symbol]));
    const mappedResult = sourceSet.mapByField('from');
    
    // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ: { b1, b2 }.mapByField('from') => { a1 }
    expect(mappedResult.size).toBe(1);
    expect(mappedResult.has(a1)).toBe(true);
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    let changedEvents = 0;
    mappedResult.on(deep.events.dataChanged, () => { changedEvents++; });
    
    // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–µ—Ç–∞ (destroy –Ω–µ —É–¥–∞–ª—è–µ—Ç –∏–∑ Set –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
    sourceSet.delete(b1);
    
    // –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è —Ç–µ–º –∂–µ, —Ç–∞–∫ –∫–∞–∫ b2.from —Ç–æ–∂–µ a1
    expect(mappedResult.size).toBe(1);
    expect(mappedResult.has(a1)).toBe(true);
    
    // –£–¥–∞–ª—è–µ–º –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å–µ—Ç–∞
    sourceSet.delete(b2);
    
    // –¢–µ–ø–µ—Ä—å –∏—Å—Ö–æ–¥–Ω—ã–π —Å–µ—Ç –ø—É—Å—Ç–æ–π, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º
    expect(mappedResult.size).toBe(0);
    expect(mappedResult.has(a1)).toBe(false);
    
    debug('‚úÖ mapByField handles element removal gracefully');
  });
  
  it('should handle elements with undefined relation fields', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);
    
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –±–µ–∑ from –ø–æ–ª—è (from –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é undefined)
    const orphan1 = new deep(); // –ù–µ—Ç from
    const orphan2 = new deep(); // –ù–µ—Ç from  
    orphan2.from = a1; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º from
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º manyRelation –Ω–∞–ø—Ä—è–º—É—é —Å –ø–æ–ª–µ–º 'from'
    const orphan1From = orphan1.manyRelation('from');
    const orphan2From = orphan2.manyRelation('from');
    
    expect(orphan1From.size).toBe(0); // –ü—É—Å—Ç–æ–π (–Ω–µ—Ç from)
    expect(orphan2From.size).toBe(1); // { a1 }
    expect(orphan2From.has(a1)).toBe(true);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º deep.Set.map –Ω–∞–ø—Ä—è–º—É—é
    const mixedSet = new deep.Set(new Set([orphan1._symbol, orphan2._symbol]));
    const setOfSets = mixedSet.map((elementSymbol: any) => {
      const element = deep.detect(elementSymbol);
      return element.manyRelation('from');
    });
    
    expect(setOfSets.size).toBe(2); // –î–≤–∞ —Å–µ—Ç–∞: –æ–¥–∏–Ω –ø—É—Å—Ç–æ–π, –æ–¥–∏–Ω —Å a1
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º deep.Or —Å —Å–µ—Ç–æ–º —Å–æ–¥–µ—Ä–∂–∞—â–∏–º –ø—É—Å—Ç–æ–π —Å–µ—Ç
    const orOperation = new deep.Or(undefined, setOfSets);
    const orResult = orOperation.to;
    
    expect(orResult.size).toBe(1); // –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ a1, –ø—É—Å—Ç–æ–π —Å–µ—Ç –Ω–µ –≤–ª–∏—è–µ—Ç
    expect(orResult.has(a1)).toBe(true);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º mapByField - –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    const fromResult = mixedSet.mapByField('from');
    expect(fromResult.size).toBe(1); // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ: —Ç–æ–ª—å–∫–æ a1
    expect(fromResult.has(a1)).toBe(true);
    
    // –¢–µ—Å—Ç —Å –ø–æ–ª–µ–º –≥–¥–µ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–º–µ—é—Ç –ø—É—Å—Ç—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è
    const noFromSet = new deep.Set(new Set([orphan1._symbol])); // –¢–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç –±–µ–∑ from
    const emptyFromResult = noFromSet.mapByField('from');
    
    // orphan1.manyRelation('from') = {} (–ø—É—Å—Ç–æ–π)
    // –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ = {} (–ø—É—Å—Ç–æ–µ)
    expect(emptyFromResult.size).toBe(0);
    
    debug('‚úÖ mapByField handles undefined relation fields correctly');
  });
  
  it('should handle complex chains of mapByField operations', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);
    
    // –°–æ–∑–¥–∞–µ–º —Ü–µ–ø–æ—á–∫—É: a1.out ‚Üí mapByField('type') ‚Üí mapByField('typed')
    
    // –®–∞–≥ 1: a1.manyRelation('out') = { b1, b2 }
    const step1 = a1.manyRelation('out');
    expect(step1.size).toBe(2);
    expect(step1.has(b1)).toBe(true);
    expect(step1.has(b2)).toBe(true);
    
    // –®–∞–≥ 2: { b1, b2 }.mapByField('type') = { B }
    const step2 = step1.mapByField('type');
    expect(step2.size).toBe(1);
    expect(step2.has(B)).toBe(true);
    
    // –®–∞–≥ 3: { B }.mapByField('typed') = { b1, b2 } (–≤—Å–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã B)
    const step3 = step2.mapByField('typed');
    expect(step3.size).toBe(2);
    expect(step3.has(b1)).toBe(true);
    expect(step3.has(b2)).toBe(true);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ü–µ–ø–æ—á–∫–∏
    let chainChanged = false;
    step3.on(deep.events.dataChanged, () => { chainChanged = true; });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Ç–∏–ø–∞ B
    const b3 = new deep();
    b3.type = B;
    
    // –ò–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–ø–∞–≥–∏—Ä–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –≤—Å—é —Ü–µ–ø–æ—á–∫—É
    expect(step3.size).toBe(3);
    expect(step3.has(b3)).toBe(true);
    expect(chainChanged).toBe(true);
    
    debug('‚úÖ mapByField handles complex operation chains correctly');
  });
  
  it('should handle mapByField with identical relation results', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);
    
    // –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ relation —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    const sameFromSet = new deep.Set(new Set([b1._symbol, b2._symbol]));
    const fromResult = sameFromSet.mapByField('from');
    
    // b1.manyRelation('from') = { a1 }
    // b2.manyRelation('from') = { a1 }
    // –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ = { a1 } (–¥—É–±–ª–∏–∫–∞—Ç—ã –æ–±—ä–µ–¥–∏–Ω—è—é—Ç—Å—è)
    expect(fromResult.size).toBe(1);
    expect(fromResult.has(a1)).toBe(true);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    let resultChanged = false;
    fromResult.on(deep.events.dataChanged, () => { resultChanged = true; });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –µ—â–µ –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç —Å —Ç–µ–º –∂–µ from
    const b3 = new deep();
    b3.type = B;
    b3.from = a1; // –¢–æ—Ç –∂–µ from —á—Ç–æ —É b1 –∏ b2
    
    sameFromSet.add(b3);
    
    // –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –∏–∑–º–µ–Ω–∏—Ç—å—Å—è (–≤—Å–µ –µ—â–µ { a1 })
    expect(fromResult.size).toBe(1);
    expect(fromResult.has(a1)).toBe(true);
    // –°–æ–±—ã—Ç–∏—è –º–æ–≥—É—Ç –Ω–µ —ç–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    // expect(resultChanged).toBe(true); // –ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º, —Ç.–∫. Or –º–æ–∂–µ—Ç –Ω–µ —ç–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –µ—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    
    debug('‚úÖ mapByField handles identical relation results correctly');
  });
  
  it('should handle mapByField performance and memory with large sets', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);
    
    // –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–æ–π —Å–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const largeSet = new deep.Set(new Set());
    const targetTypes = [A, B, C, D];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    for (let i = 0; i < 100; i++) {
      const element = new deep();
      element.type = targetTypes[i % targetTypes.length];
      largeSet.add(element);
    }
    
    expect(largeSet.size).toBe(100);
    
    // mapByField –¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ–ª—å—à–æ–π —Å–µ—Ç
    const start = Date.now();
    const typesResult = largeSet.mapByField('type');
    const duration = Date.now() - start;
    
    // –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Å–µ 4 —Ç–∏–ø–∞
    expect(typesResult.size).toBe(4);
    expect(typesResult.has(A)).toBe(true);
    expect(typesResult.has(B)).toBe(true);
    expect(typesResult.has(C)).toBe(true);
    expect(typesResult.has(D)).toBe(true);
    
    // –û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è —Ä–∞–∑—É–º–Ω–æ –±—ã—Å—Ç—Ä–æ (< 1 —Å–µ–∫—É–Ω–¥—ã)
    expect(duration).toBeLessThan(1000);
    
    debug('‚úÖ mapByField handles large sets efficiently, duration:', duration + 'ms');
  });
  
  it('should handle critical STAGE 2 scenario simulation', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);
    
    // –°–∏–º—É–ª—è—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –∏–∑ –≠–¢–ê–ü–ê 2:
    // deep.query({ out: { type: B } }) 
    // ‚Üí queryField('out', { type: B })
    // ‚Üí query({ type: B }) ‚Üí { b1, b2 }
    // ‚Üí { b1, b2 }.mapByField('from') ‚Üí { a1 }
    
    // –®–∞–≥ 1: –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç query({ type: B }) = { b1, b2 }
    const queryTypeB = new deep.Set(new Set([b1._symbol, b2._symbol]));
    expect(queryTypeB.size).toBe(2);
    
    // –®–∞–≥ 2: mapByField('from') - –∫–ª—é—á–µ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –¥–ª—è –≠–¢–ê–ü–ê 2
    const mapByFromResult = queryTypeB.mapByField('from');
    
    // –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: { a1 } (—Ç.–∫. –∏ b1.from –∏ b2.from = a1)
    expect(mapByFromResult.size).toBe(1);
    expect(mapByFromResult.has(a1)).toBe(true);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
    let stage2Changed = false;
    mapByFromResult.on(deep.events.dataChanged, () => { stage2Changed = true; });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Ç–∏–ø–∞ B —Å –¥—Ä—É–≥–∏–º from
    const b3 = new deep();
    b3.type = B;
    b3.from = a2; // –î—Ä—É–≥–æ–π from
    
    queryTypeB.add(b3);
    
    // –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–∏—Ç—å—Å—è: { a1, a2 }
    expect(mapByFromResult.size).toBe(2);
    expect(mapByFromResult.has(a1)).toBe(true);
    expect(mapByFromResult.has(a2)).toBe(true);
    expect(stage2Changed).toBe(true);
    
    // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å from = a1
    queryTypeB.delete(b1);
    queryTypeB.delete(b2);
    
    // –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ { a2 }
    expect(mapByFromResult.size).toBe(1);
    expect(mapByFromResult.has(a2)).toBe(true);
    expect(mapByFromResult.has(a1)).toBe(false);
    
    debug('‚úÖ mapByField handles critical STAGE 2 scenario correctly');
  });
}); 