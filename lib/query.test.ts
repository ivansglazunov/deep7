import { describe, it, expect } from '@jest/globals';
import Debug from './debug';
import { newDeep } from './deep';

const debug = Debug('query:test');

// –¢–µ—Å—Ç–æ–≤—ã–π –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ QUERY2.md
function makeDataset(deep: any) {
  debug('üèóÔ∏è Creating test dataset');

  // –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã
  const A = new deep();
  const a1 = new deep();
  const a2 = new deep();
  a1.type = A;
  a2.type = A;

  const B = new deep();
  const b1 = new deep();
  const b2 = new deep();
  b1.type = B;
  b2.type = B;
  b1.from = a1;
  b2.from = a1;

  const C = new deep();
  const c1 = new deep();
  const c2 = new deep();
  c1.type = C;
  c2.type = C;
  c1.to = a2;
  c2.to = a2;

  const str = new deep.String('abc');
  const D = new deep();
  const d1 = new deep();
  const d2 = new deep();
  d1.type = D;
  d2.type = D;
  d1.value = str;
  d2.value = str;

  debug('‚úÖ Test dataset created');
  return { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str };
}

describe('manyRelation', () => {
  let deep: any;

  beforeEach(() => {
    debug('üß™ Setting up test environment for manyRelation');
    deep = newDeep();
  });

  describe('type relation', () => {
    it('should handle single type relation with tracking', () => {
      const { A, a1, a2 } = makeDataset(deep);

      // –ê–∫—Å–∏–æ–º–∞: a1.type –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∏–ø –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ A –ª–∏–±–æ undefined
      expect(a1.type._id).toBe(A._id);

      // –ê–∫—Å–∏–æ–º–∞: a1.manyRelation('type') –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å { A }
      const a1TypeSet = a1.manyRelation('type');
      expect(a1TypeSet.type.is(deep.Set)).toBe(true);
      expect(a1TypeSet.size).toBe(1);
      expect(a1TypeSet.has(A)).toBe(true);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞ - –∏–∑–º–µ–Ω–µ–Ω–∏–µ type –¥–æ–ª–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      let typeSetChanged = false;
      let addedElement = null;
      let deletedElement = null;

      a1TypeSet.on(deep.events.dataAdd, (element) => {
        addedElement = element;
        typeSetChanged = true;
      });

      a1TypeSet.on(deep.events.dataDelete, (element) => {
        deletedElement = element;
        typeSetChanged = true;
      });

      // –ò–∑–º–µ–Ω—è–µ–º —Ç–∏–ø –Ω–∞ –Ω–æ–≤—ã–π
      const Y = new deep();
      a1.type = Y;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–∏–ª—Å—è
      expect(a1TypeSet.size).toBe(1);
      expect(a1TypeSet.has(Y)).toBe(true);
      expect(a1TypeSet.has(A)).toBe(false);
      expect(typeSetChanged).toBe(true);
      expect(addedElement).toBeTruthy();
      expect(deletedElement).toBeTruthy();

      debug('‚úÖ type relation tracking works correctly');
    });
  });

  describe('typed relation', () => {
    it('should handle multiple typed relation with tracking', () => {
      const { A, a1, a2 } = makeDataset(deep);

      // –ê–∫—Å–∏–æ–º–∞: A.typed –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ—Ç —Ç–µ—Ö –∫—Ç–æ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–∞–Ω–Ω–æ–π –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–µ–π { a1, a2 }
      const ATypedSet = A.manyRelation('typed');
      expect(ATypedSet.type.is(deep.Set)).toBe(true);
      expect(ATypedSet.size).toBe(2);
      expect(ATypedSet.has(a1)).toBe(true);
      expect(ATypedSet.has(a2)).toBe(true);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞ - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Ç–∏–ø–∞ A
      let addedElement = null;
      ATypedSet.on(deep.events.dataAdd, (element) => {
        addedElement = element;
      });

      const a3 = new deep();
      a3.type = A;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–æ–±–∞–≤–∏–ª—Å—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      expect(ATypedSet.size).toBe(3);
      expect(ATypedSet.has(a3)).toBe(true);
      expect(addedElement).toBeTruthy();

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞ - —É–¥–∞–ª–µ–Ω–∏–µ —Å–≤—è–∑–∏ type
      let deletedElement = null;
      ATypedSet.on(deep.events.dataDelete, (element) => {
        deletedElement = element;
      });

      delete a1.type;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç —É–¥–∞–ª–∏–ª—Å—è –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      expect(ATypedSet.size).toBe(2);
      expect(ATypedSet.has(a1)).toBe(false);
      expect(ATypedSet.has(a2)).toBe(true);
      expect(ATypedSet.has(a3)).toBe(true);
      expect(deletedElement).toBeTruthy();

      debug('‚úÖ typed relation tracking works correctly');
    });
  });

  describe('from/out relation', () => {
    it('should handle from/out relation with tracking', () => {
      const { a1, B, b1, b2 } = makeDataset(deep);

      // –ê–∫—Å–∏–æ–º–∞: b1.from –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ –∫—É–¥–∞ –¥–∞–Ω–Ω–∞—è –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è —Å—Å—ã–ª–∞–µ—Ç—Å—è –∫–∞–∫ –Ω–∞ from - a1 –∏–ª–∏ undefined
      expect(b1.from._id).toBe(a1._id);

      // –ê–∫—Å–∏–æ–º–∞: b1.manyRelation('from') –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å { a1 }
      const b1FromSet = b1.manyRelation('from');
      expect(b1FromSet.type.is(deep.Set)).toBe(true);
      expect(b1FromSet.size).toBe(1);
      expect(b1FromSet.has(a1)).toBe(true);

      // –ê–∫—Å–∏–æ–º–∞: a1.out –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ—Ç —Ç–µ—Ö –∫—Ç–æ —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –¥–∞–Ω–Ω—É—é –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—é –∫–∞–∫ –Ω–∞ from { b1, b2 }
      const a1OutSet = a1.manyRelation('out');
      expect(a1OutSet.type.is(deep.Set)).toBe(true);
      expect(a1OutSet.size).toBe(2);
      expect(a1OutSet.has(b1)).toBe(true);
      expect(a1OutSet.has(b2)).toBe(true);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞ - –∏–∑–º–µ–Ω–µ–Ω–∏–µ from –¥–æ–ª–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      let fromSetChanged = false;
      let outSetChanged = false;

      b1FromSet.on(deep.events.dataChanged, () => { fromSetChanged = true; });
      a1OutSet.on(deep.events.dataChanged, () => { outSetChanged = true; });

      const newTarget = new deep();
      b1.from = newTarget;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
      expect(b1FromSet.has(newTarget)).toBe(true);
      expect(b1FromSet.has(a1)).toBe(false);
      expect(a1OutSet.has(b1)).toBe(false);
      expect(fromSetChanged).toBe(true);
      expect(outSetChanged).toBe(true);

      debug('‚úÖ from/out relation tracking works correctly');
    });
  });

  describe('to/in relation', () => {
    it('should handle to/in relation with tracking', () => {
      const { a2, C, c1, c2 } = makeDataset(deep);

      // –ê–∫—Å–∏–æ–º–∞: c1.to –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ –∫—É–¥–∞ –¥–∞–Ω–Ω–∞—è –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è —Å—Å—ã–ª–∞–µ—Ç—Å—è –∫–∞–∫ –Ω–∞ to - a2 –∏–ª–∏ undefined
      expect(c1.to._id).toBe(a2._id);

      // –ê–∫—Å–∏–æ–º–∞: c1.manyRelation('to') –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å { a2 }
      const c1ToSet = c1.manyRelation('to');
      expect(c1ToSet.type.is(deep.Set)).toBe(true);
      expect(c1ToSet.size).toBe(1);
      expect(c1ToSet.has(a2)).toBe(true);

      // –ê–∫—Å–∏–æ–º–∞: a2.in –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ—Ç —Ç–µ—Ö –∫—Ç–æ —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –¥–∞–Ω–Ω—É—é –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—é –∫–∞–∫ –Ω–∞ to { c1, c2 }
      const a2InSet = a2.manyRelation('in');
      expect(a2InSet.type.is(deep.Set)).toBe(true);
      expect(a2InSet.size).toBe(2);
      expect(a2InSet.has(c1)).toBe(true);
      expect(a2InSet.has(c2)).toBe(true);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞ - —É–¥–∞–ª–µ–Ω–∏–µ to –¥–æ–ª–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      let toSetChanged = false;
      let inSetChanged = false;

      c1ToSet.on(deep.events.dataChanged, () => { toSetChanged = true; });
      a2InSet.on(deep.events.dataChanged, () => { inSetChanged = true; });

      delete c1.to;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
      expect(c1ToSet.size).toBe(0);
      expect(a2InSet.has(c1)).toBe(false);
      expect(a2InSet.has(c2)).toBe(true);
      expect(toSetChanged).toBe(true);
      expect(inSetChanged).toBe(true);

      debug('‚úÖ to/in relation tracking works correctly');
    });
  });

  describe('value/valued relation', () => {
    it('should handle value/valued relation with tracking', () => {
      const { str, D, d1, d2 } = makeDataset(deep);

      // –ê–∫—Å–∏–æ–º–∞: d1.value –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ –∫—É–¥–∞ –¥–∞–Ω–Ω–∞—è –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è —Å—Å—ã–ª–∞–µ—Ç—Å—è –∫–∞–∫ –Ω–∞ .value - str –∏–ª–∏ undefined
      expect(d1.value._id).toBe(str._id);

      // –ê–∫—Å–∏–æ–º–∞: d1.manyRelation('value') –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å { str }
      const d1ValueSet = d1.manyRelation('value');
      expect(d1ValueSet.type.is(deep.Set)).toBe(true);
      expect(d1ValueSet.size).toBe(1);
      expect(d1ValueSet.has(str)).toBe(true);

      // –ê–∫—Å–∏–æ–º–∞: str.valued –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ—Ç —Ç–µ—Ö –∫—Ç–æ —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –¥–∞–Ω–Ω—É—é –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—é –∫–∞–∫ –Ω–∞ value { d1, d2 }
      const strValuedSet = str.manyRelation('valued');
      expect(strValuedSet.type.is(deep.Set)).toBe(true);
      expect(strValuedSet.size).toBe(2);
      expect(strValuedSet.has(d1)).toBe(true);
      expect(strValuedSet.has(d2)).toBe(true);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞ - —É–¥–∞–ª–µ–Ω–∏–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ value
      let valueSetChanged = false;
      let valuedSetChanged = false;

      d1ValueSet.on(deep.events.dataChanged, () => { valueSetChanged = true; });
      strValuedSet.on(deep.events.dataChanged, () => { valuedSetChanged = true; });

      // –£–¥–∞–ª—è–µ–º value
      delete d1.value;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ d1 –∏—Å—á–µ–∑ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      expect(d1ValueSet.size).toBe(0);
      expect(strValuedSet.has(d1)).toBe(false);
      expect(strValuedSet.has(d2)).toBe(true);
      expect(valueSetChanged).toBe(true);
      expect(valuedSetChanged).toBe(true);

      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º value
      valueSetChanged = false;
      valuedSetChanged = false;

      d1.value = str;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ d1 –≤–µ—Ä–Ω—É–ª—Å—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      expect(d1ValueSet.size).toBe(1);
      expect(d1ValueSet.has(str)).toBe(true);
      expect(strValuedSet.has(d1)).toBe(true);
      expect(valueSetChanged).toBe(true);
      expect(valuedSetChanged).toBe(true);

      debug('‚úÖ value/valued relation tracking works correctly');
    });
  });
});

describe('mapByField', () => {
  let deep: any;

  beforeEach(() => {
    debug('üß™ Setting up test environment for mapByField');
    deep = newDeep();
  });

  it('should map relation field and work with deep.Or', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);

    // –ê–∫—Å–∏–æ–º–∞: testDeepSet = a1.manyRelation('out') { b1, b2 }
    const a1OutSet = a1.manyRelation('out');
    expect(a1OutSet.type.is(deep.Set)).toBe(true);
    expect(a1OutSet.size).toBe(2);
    expect(a1OutSet.has(b1)).toBe(true);
    expect(a1OutSet.has(b2)).toBe(true);

    // –ê–∫—Å–∏–æ–º–∞: mappedByField = testDeepSet.mapByField('from') => { { a1 }, { a1 } }
    // –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–µ—Ç–∞ (b1, b2) –¥–∞–µ—Ç —Å–≤–æ–π manyRelation('from') —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    debug('üß™ Testing mapByField on a1.out set with field "from"');
    const mappedByField = a1OutSet.mapByField('from');

    // –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å Deep.Set —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ manyRelation('from')
    // b1.manyRelation('from') = { a1 }
    // b2.manyRelation('from') = { a1 }
    // –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Or = { a1 }
    expect(mappedByField.type.is(deep.Set)).toBe(true);
    expect(mappedByField.size).toBe(1);
    expect(mappedByField.has(a1)).toBe(true);

    debug('‚úÖ mapByField basic functionality works correctly');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞ - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∏—Å—Ö–æ–¥–Ω—ã–π —Å–µ—Ç
    let mappedChanged = false;
    mappedByField.on(deep.events.dataChanged, () => { mappedChanged = true; });

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç b3 —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ a2
    const b3 = new deep();
    b3.type = B;
    b3.from = a2;

    // –î–æ–±–∞–≤–ª—è–µ–º b3 –≤ –∏—Å—Ö–æ–¥–Ω—ã–π —Å–µ—Ç a1OutSet (—ç–º—É–ª–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ out)
    a1OutSet.add(b3);

    // –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–∏—Ç—å—Å—è: —Ç–µ–ø–µ—Ä—å { a1, a2 }
    expect(mappedByField.size).toBe(2);
    expect(mappedByField.has(a1)).toBe(true);
    expect(mappedByField.has(a2)).toBe(true);
    expect(mappedChanged).toBe(true);

    debug('‚úÖ mapByField tracking works correctly');
  });

  it('should handle different relation fields', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);

    // –¢–µ—Å—Ç —Å 'type' –ø–æ–ª–µ–º
    const instancesSet = new deep.Set(new Set([a1._symbol, a2._symbol]));
    const typesResult = instancesSet.mapByField('type');

    expect(typesResult.type.is(deep.Set)).toBe(true);
    expect(typesResult.size).toBe(1);
    expect(typesResult.has(A)).toBe(true);

    // –¢–µ—Å—Ç —Å 'value' –ø–æ–ª–µ–º
    const valueLinksSet = new deep.Set(new Set([d1._symbol, d2._symbol]));
    const valuesResult = valueLinksSet.mapByField('value');

    expect(valuesResult.type.is(deep.Set)).toBe(true);
    expect(valuesResult.size).toBe(1);
    expect(valuesResult.has(str)).toBe(true);

    debug('‚úÖ mapByField works with different relation fields');
  });

  it('should handle empty sets', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);

    const emptySet = new deep.Set(new Set());
    const emptyResult = emptySet.mapByField('type');

    expect(emptyResult.type.is(deep.Set)).toBe(true);
    expect(emptyResult.size).toBe(0);

    debug('‚úÖ mapByField handles empty sets correctly');
  });

  it('should handle all inverted field combinations', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø–æ–ª–µ–π –∏ –∏—Ö –∏–Ω–≤–µ—Ä—Å–∏–π

    // type -> typed: { a1, a2 }.mapByField('type') => { A }
    const instancesSet = new deep.Set(new Set([a1._symbol, a2._symbol]));
    const typesResult = instancesSet.mapByField('type');
    expect(typesResult.size).toBe(1);
    expect(typesResult.has(A)).toBe(true);

    // typed -> type: { A }.mapByField('typed') => { a1, a2 }
    const typesSet = new deep.Set(new Set([A._symbol]));
    const instancesResult = typesSet.mapByField('typed');
    expect(instancesResult.size).toBe(2);
    expect(instancesResult.has(a1)).toBe(true);
    expect(instancesResult.has(a2)).toBe(true);

    // from -> out: { b1, b2 }.mapByField('from') => { a1 }
    const fromLinksSet = new deep.Set(new Set([b1._symbol, b2._symbol]));
    const fromTargetsResult = fromLinksSet.mapByField('from');
    expect(fromTargetsResult.size).toBe(1);
    expect(fromTargetsResult.has(a1)).toBe(true);

    // out -> from: { a1 }.mapByField('out') => { b1, b2 }
    const fromTargetsSet = new deep.Set(new Set([a1._symbol]));
    const fromLinksResult = fromTargetsSet.mapByField('out');
    expect(fromLinksResult.size).toBe(2);
    expect(fromLinksResult.has(b1)).toBe(true);
    expect(fromLinksResult.has(b2)).toBe(true);

    // to -> in: { c1, c2 }.mapByField('to') => { a2 }
    const toLinksSet = new deep.Set(new Set([c1._symbol, c2._symbol]));
    const toTargetsResult = toLinksSet.mapByField('to');
    expect(toTargetsResult.size).toBe(1);
    expect(toTargetsResult.has(a2)).toBe(true);

    // in -> to: { a2 }.mapByField('in') => { c1, c2 }
    const toTargetsSet = new deep.Set(new Set([a2._symbol]));
    const toLinksResult = toTargetsSet.mapByField('in');
    expect(toLinksResult.size).toBe(2);
    expect(toLinksResult.has(c1)).toBe(true);
    expect(toLinksResult.has(c2)).toBe(true);

    // value -> valued: { d1, d2 }.mapByField('value') => { str }
    const valueLinksSet = new deep.Set(new Set([d1._symbol, d2._symbol]));
    const valueTargetsResult = valueLinksSet.mapByField('value');
    expect(valueTargetsResult.size).toBe(1);
    expect(valueTargetsResult.has(str)).toBe(true);

    // valued -> value: { str }.mapByField('valued') => { d1, d2 }
    const valueTargetsSet = new deep.Set(new Set([str._symbol]));
    const valueLinksResult = valueTargetsSet.mapByField('valued');
    expect(valueLinksResult.size).toBe(2);
    expect(valueLinksResult.has(d1)).toBe(true);
    expect(valueLinksResult.has(d2)).toBe(true);

    debug('‚úÖ mapByField handles all inverted field combinations correctly');
  });

  it('should handle complex tracking scenarios', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);

    // –°–æ–∑–¥–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å–µ—Ç –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è mapByField
    const dynamicSet = new deep.Set(new Set([b1._symbol]));
    const mappedResult = dynamicSet.mapByField('from');

    // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ: { b1 }.mapByField('from') => { a1 }
    expect(mappedResult.size).toBe(1);
    expect(mappedResult.has(a1)).toBe(true);

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    let addedElements: any[] = [];
    let deletedElements: any[] = [];

    mappedResult.on(deep.events.dataAdd, (...elements: any[]) => {
      addedElements.push(...elements);
    });

    mappedResult.on(deep.events.dataDelete, (...elements: any[]) => {
      deletedElements.push(...elements);
    });

    // –î–æ–±–∞–≤–ª—è–µ–º b2 –≤ –∏—Å—Ö–æ–¥–Ω—ã–π —Å–µ—Ç: { b1, b2 }.mapByField('from') => { a1 }
    // –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –∏–∑–º–µ–Ω–∏—Ç—å—Å—è, —Ç–∞–∫ –∫–∞–∫ b2.from —Ç–æ–∂–µ a1
    dynamicSet.add(b2);
    expect(mappedResult.size).toBe(1);
    expect(mappedResult.has(a1)).toBe(true);

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–≤—è–∑—å b3 —Å –¥—Ä—É–≥–∏–º from
    const b3 = new deep();
    b3.type = B;
    b3.from = a2;

    // –î–æ–±–∞–≤–ª—è–µ–º b3: { b1, b2, b3 }.mapByField('from') => { a1, a2 }
    dynamicSet.add(b3);
    expect(mappedResult.size).toBe(2);
    expect(mappedResult.has(a1)).toBe(true);
    expect(mappedResult.has(a2)).toBe(true);
    expect(addedElements.length).toBe(1);
    expect(addedElements[0]._id).toBe(a2._id);

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ b1, b2 (–æ–±–∞ —Å—Å—ã–ª–∞—é—Ç—Å—è –Ω–∞ a1): { b3 }.mapByField('from') => { a2 }
    dynamicSet.delete(b1);
    dynamicSet.delete(b2);
    expect(mappedResult.size).toBe(1);
    expect(mappedResult.has(a2)).toBe(true);
    expect(mappedResult.has(a1)).toBe(false);
    expect(deletedElements.length).toBe(1);
    expect(deletedElements[0]._id).toBe(a1._id);

    // –ò–∑–º–µ–Ω—è–µ–º from —É b3: b3.from = a1
    addedElements = [];
    deletedElements = [];
    b3.from = a1;

    // –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω —Å—Ç–∞—Ç—å { a1 }
    expect(mappedResult.size).toBe(1);
    expect(mappedResult.has(a1)).toBe(true);
    expect(mappedResult.has(a2)).toBe(false);

    debug('‚úÖ mapByField handles complex tracking scenarios correctly');
  });

  it('should handle multiple different results', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);

    // –°–æ–∑–¥–∞–µ–º —Å–º–µ—à–∞–Ω–Ω—ã–π —Å–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏
    const str2 = new deep.String('xyz');
    const d3 = new deep();
    d3.type = D;
    d3.value = str2;

    // –°–µ—Ç —Å–æ —Å–≤—è–∑—è–º–∏ –Ω–∞ —Ä–∞–∑–Ω—ã–µ value: { d1, d2, d3 }
    // d1.value = str, d2.value = str, d3.value = str2
    const mixedValueSet = new deep.Set(new Set([d1._symbol, d2._symbol, d3._symbol]));
    const valuesResult = mixedValueSet.mapByField('value');

    // –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–±–∞ string: { str, str2 }
    expect(valuesResult.size).toBe(2);
    expect(valuesResult.has(str)).toBe(true);
    expect(valuesResult.has(str2)).toBe(true);

    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏
    const Y = new deep();
    const y1 = new deep();
    y1.type = Y;

    // –°–µ—Ç —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤: { a1, y1 }
    const mixedTypesSet = new deep.Set(new Set([a1._symbol, y1._symbol]));
    const typesResult = mixedTypesSet.mapByField('type');

    // –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–±–∞ —Ç–∏–ø–∞: { A, Y }
    expect(typesResult.size).toBe(2);
    expect(typesResult.has(A)).toBe(true);
    expect(typesResult.has(Y)).toBe(true);

    debug('‚úÖ mapByField handles multiple different results correctly');
  });

  it('should handle element destruction gracefully', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);

    // –°–æ–∑–¥–∞–µ–º —Å–µ—Ç –∏ mapByField —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const sourceSet = new deep.Set(new Set([b1._symbol, b2._symbol]));
    const mappedResult = sourceSet.mapByField('from');

    // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ: { b1, b2 }.mapByField('from') => { a1 }
    expect(mappedResult.size).toBe(1);
    expect(mappedResult.has(a1)).toBe(true);

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    let changedEvents = 0;
    mappedResult.on(deep.events.dataChanged, () => { changedEvents++; });

    // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–µ—Ç–∞ (destroy –Ω–µ —É–¥–∞–ª—è–µ—Ç –∏–∑ Set –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
    sourceSet.delete(b1);

    // –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è —Ç–µ–º –∂–µ, —Ç–∞–∫ –∫–∞–∫ b2.from —Ç–æ–∂–µ a1
    expect(mappedResult.size).toBe(1);
    expect(mappedResult.has(a1)).toBe(true);

    // –£–¥–∞–ª—è–µ–º –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å–µ—Ç–∞
    sourceSet.delete(b2);

    // –¢–µ–ø–µ—Ä—å –∏—Å—Ö–æ–¥–Ω—ã–π —Å–µ—Ç –ø—É—Å—Ç–æ–π, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º
    expect(mappedResult.size).toBe(0);
    expect(mappedResult.has(a1)).toBe(false);

    debug('‚úÖ mapByField handles element removal gracefully');
  });

  it('should handle elements with undefined relation fields', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);

    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –±–µ–∑ from –ø–æ–ª—è (from –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é undefined)
    const orphan1 = new deep(); // –ù–µ—Ç from
    const orphan2 = new deep(); // –ù–µ—Ç from  
    orphan2.from = a1; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º from

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º manyRelation –Ω–∞–ø—Ä—è–º—É—é —Å –ø–æ–ª–µ–º 'from'
    const orphan1From = orphan1.manyRelation('from');
    const orphan2From = orphan2.manyRelation('from');

    expect(orphan1From.size).toBe(0); // –ü—É—Å—Ç–æ–π (–Ω–µ—Ç from)
    expect(orphan2From.size).toBe(1); // { a1 }
    expect(orphan2From.has(a1)).toBe(true);

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º deep.Set.map –Ω–∞–ø—Ä—è–º—É—é
    const mixedSet = new deep.Set(new Set([orphan1._symbol, orphan2._symbol]));
    const setOfSets = mixedSet.map((elementSymbol: any) => {
      const element = deep.detect(elementSymbol);
      return element.manyRelation('from');
    });

    expect(setOfSets.size).toBe(2); // –î–≤–∞ —Å–µ—Ç–∞: –æ–¥–∏–Ω –ø—É—Å—Ç–æ–π, –æ–¥–∏–Ω —Å a1

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º deep.Or —Å —Å–µ—Ç–æ–º —Å–æ–¥–µ—Ä–∂–∞—â–∏–º –ø—É—Å—Ç–æ–π —Å–µ—Ç
    const orOperation = new deep.Or(undefined, setOfSets);
    const orResult = orOperation.to;

    expect(orResult.size).toBe(1); // –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ a1, –ø—É—Å—Ç–æ–π —Å–µ—Ç –Ω–µ –≤–ª–∏—è–µ—Ç
    expect(orResult.has(a1)).toBe(true);

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º mapByField - –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    const fromResult = mixedSet.mapByField('from');
    expect(fromResult.size).toBe(1); // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ: —Ç–æ–ª—å–∫–æ a1
    expect(fromResult.has(a1)).toBe(true);

    // –¢–µ—Å—Ç —Å –ø–æ–ª–µ–º –≥–¥–µ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–º–µ—é—Ç –ø—É—Å—Ç—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è
    const noFromSet = new deep.Set(new Set([orphan1._symbol])); // –¢–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç –±–µ–∑ from
    const emptyFromResult = noFromSet.mapByField('from');

    // orphan1.manyRelation('from') = {} (–ø—É—Å—Ç–æ–π)
    // –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ = {} (–ø—É—Å—Ç–æ–µ)
    expect(emptyFromResult.size).toBe(0);

    debug('‚úÖ mapByField handles undefined relation fields correctly');
  });

  it('should handle complex chains of mapByField operations', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);

    // –°–æ–∑–¥–∞–µ–º —Ü–µ–ø–æ—á–∫—É: a1.out ‚Üí mapByField('type') ‚Üí mapByField('typed')

    // –®–∞–≥ 1: a1.manyRelation('out') = { b1, b2 }
    const step1 = a1.manyRelation('out');
    expect(step1.size).toBe(2);
    expect(step1.has(b1)).toBe(true);
    expect(step1.has(b2)).toBe(true);

    // –®–∞–≥ 2: { b1, b2 }.mapByField('type') = { B }
    const step2 = step1.mapByField('type');
    expect(step2.size).toBe(1);
    expect(step2.has(B)).toBe(true);

    // –®–∞–≥ 3: { B }.mapByField('typed') = { b1, b2 } (–≤—Å–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã B)
    const step3 = step2.mapByField('typed');
    expect(step3.size).toBe(2);
    expect(step3.has(b1)).toBe(true);
    expect(step3.has(b2)).toBe(true);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ü–µ–ø–æ—á–∫–∏
    let chainChanged = false;
    step3.on(deep.events.dataChanged, () => { chainChanged = true; });

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Ç–∏–ø–∞ B
    const b3 = new deep();
    b3.type = B;

    // –ò–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–ø–∞–≥–∏—Ä–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –≤—Å—é —Ü–µ–ø–æ—á–∫—É
    expect(step3.size).toBe(3);
    expect(step3.has(b3)).toBe(true);
    expect(chainChanged).toBe(true);

    debug('‚úÖ mapByField handles complex operation chains correctly');
  });

  it('should handle mapByField with identical relation results', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);

    // –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ relation —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    const sameFromSet = new deep.Set(new Set([b1._symbol, b2._symbol]));
    const fromResult = sameFromSet.mapByField('from');

    // b1.manyRelation('from') = { a1 }
    // b2.manyRelation('from') = { a1 }
    // –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ = { a1 } (–¥—É–±–ª–∏–∫–∞—Ç—ã –æ–±—ä–µ–¥–∏–Ω—è—é—Ç—Å—è)
    expect(fromResult.size).toBe(1);
    expect(fromResult.has(a1)).toBe(true);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    let resultChanged = false;
    fromResult.on(deep.events.dataChanged, () => { resultChanged = true; });

    // –î–æ–±–∞–≤–ª—è–µ–º –µ—â–µ –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç —Å —Ç–µ–º –∂–µ from
    const b3 = new deep();
    b3.type = B;
    b3.from = a1; // –¢–æ—Ç –∂–µ from —á—Ç–æ —É b1 –∏ b2

    sameFromSet.add(b3);

    // –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –∏–∑–º–µ–Ω–∏—Ç—å—Å—è (–≤—Å–µ –µ—â–µ { a1 })
    expect(fromResult.size).toBe(1);
    expect(fromResult.has(a1)).toBe(true);
    // –°–æ–±—ã—Ç–∏—è –º–æ–≥—É—Ç –Ω–µ —ç–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    // expect(resultChanged).toBe(true); // –ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º, —Ç.–∫. Or –º–æ–∂–µ—Ç –Ω–µ —ç–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –µ—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å

    debug('‚úÖ mapByField handles identical relation results correctly');
  });

  it('should handle critical STAGE 2 scenario simulation', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);

    // –°–∏–º—É–ª—è—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –∏–∑ –≠–¢–ê–ü–ê 2:
    // deep.query({ out: { type: B } }) 
    // ‚Üí queryField('out', { type: B })
    // ‚Üí query({ type: B }) ‚Üí { b1, b2 }
    // ‚Üí { b1, b2 }.mapByField('from') ‚Üí { a1 }

    // –®–∞–≥ 1: –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç query({ type: B }) = { b1, b2 }
    const queryTypeB = new deep.Set(new Set([b1._symbol, b2._symbol]));
    expect(queryTypeB.size).toBe(2);

    // –®–∞–≥ 2: mapByField('from') - –∫–ª—é—á–µ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –¥–ª—è –≠–¢–ê–ü–ê 2
    const mapByFromResult = queryTypeB.mapByField('from');

    // –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: { a1 } (—Ç.–∫. –∏ b1.from –∏ b2.from = a1)
    expect(mapByFromResult.size).toBe(1);
    expect(mapByFromResult.has(a1)).toBe(true);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
    let stage2Changed = false;
    mapByFromResult.on(deep.events.dataChanged, () => { stage2Changed = true; });

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Ç–∏–ø–∞ B —Å –¥—Ä—É–≥–∏–º from
    const b3 = new deep();
    b3.type = B;
    b3.from = a2; // –î—Ä—É–≥–æ–π from

    queryTypeB.add(b3);

    // –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–∏—Ç—å—Å—è: { a1, a2 }
    expect(mapByFromResult.size).toBe(2);
    expect(mapByFromResult.has(a1)).toBe(true);
    expect(mapByFromResult.has(a2)).toBe(true);
    expect(stage2Changed).toBe(true);

    // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å from = a1
    queryTypeB.delete(b1);
    queryTypeB.delete(b2);

    // –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ { a2 }
    expect(mapByFromResult.size).toBe(1);
    expect(mapByFromResult.has(a2)).toBe(true);
    expect(mapByFromResult.has(a1)).toBe(false);

    debug('‚úÖ mapByField handles critical STAGE 2 scenario correctly');
  });
});

describe('queryField', () => {
  let deep: any;

  beforeEach(() => {
    debug('üß™ Setting up test environment for queryField');
    deep = newDeep();
  });

  it('should handle queryField with Deep instance values', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);

    // –ê–∫—Å–∏–æ–º–∞: deep.queryField('type', A) // { a1, a2 }
    // –ü–æ—Ç–æ–º—É —á—Ç–æ A.manyRelation('typed') = { a1, a2 }
    const typeAResult = deep.queryField('type', A);
    expect(typeAResult.type.is(deep.Set)).toBe(true);
    expect(typeAResult.size).toBe(2);
    expect(typeAResult.has(a1)).toBe(true);
    expect(typeAResult.has(a2)).toBe(true);

    // –ê–∫—Å–∏–æ–º–∞: deep.queryField('typed', a1) // { A }
    // –ü–æ—Ç–æ–º—É —á—Ç–æ a1.manyRelation('type') = { A }
    const typedA1Result = deep.queryField('typed', a1);
    expect(typedA1Result.type.is(deep.Set)).toBe(true);
    expect(typedA1Result.size).toBe(1);
    expect(typedA1Result.has(A)).toBe(true);

    // –ê–∫—Å–∏–æ–º–∞: deep.queryField('from', a1) // { b1, b2 }
    // –ü–æ—Ç–æ–º—É —á—Ç–æ a1.manyRelation('out') = { b1, b2 }
    const fromA1Result = deep.queryField('from', a1);
    expect(fromA1Result.type.is(deep.Set)).toBe(true);
    expect(fromA1Result.size).toBe(2);
    expect(fromA1Result.has(b1)).toBe(true);
    expect(fromA1Result.has(b2)).toBe(true);

    // –ê–∫—Å–∏–æ–º–∞: deep.queryField('out', b1) // { a1 }
    // –ü–æ—Ç–æ–º—É —á—Ç–æ b1.manyRelation('from') = { a1 }
    const outB1Result = deep.queryField('out', b1);
    expect(outB1Result.type.is(deep.Set)).toBe(true);
    expect(outB1Result.size).toBe(1);
    expect(outB1Result.has(a1)).toBe(true);

    debug('‚úÖ queryField handles Deep instance values correctly');
  });

  it('should handle queryField with all relation types', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ç–∏–ø—ã –æ—Ç–Ω–æ—à–µ–Ω–∏–π

    // TO/IN –æ—Ç–Ω–æ—à–µ–Ω–∏—è
    const toA2Result = deep.queryField('to', a2);
    expect(toA2Result.size).toBe(2);
    expect(toA2Result.has(c1)).toBe(true);
    expect(toA2Result.has(c2)).toBe(true);

    const inC1Result = deep.queryField('in', c1);
    expect(inC1Result.size).toBe(1);
    expect(inC1Result.has(a2)).toBe(true);

    // VALUE/VALUED –æ—Ç–Ω–æ—à–µ–Ω–∏—è
    const valueStrResult = deep.queryField('value', str);
    expect(valueStrResult.size).toBe(2);
    expect(valueStrResult.has(d1)).toBe(true);
    expect(valueStrResult.has(d2)).toBe(true);

    const valuedD1Result = deep.queryField('valued', d1);
    expect(valuedD1Result.size).toBe(1);
    expect(valuedD1Result.has(str)).toBe(true);

    // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ—Å—Ç: –Ω–∞–π—Ç–∏ —Ç–æ –Ω–∞ —á—Ç–æ —Å—Å—ã–ª–∞–µ—Ç—Å—è d1 –∫–∞–∫ –Ω–∞ value
    const valueD1Result = deep.queryField('value', d1);
    expect(valueD1Result.size).toBe(0); // –ù–∏–∫—Ç–æ –Ω–µ —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ d1 –∫–∞–∫ –Ω–∞ value

    // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Ç–æ –Ω–∞ —á—Ç–æ —Å—Å—ã–ª–∞–µ—Ç—Å—è d1, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ
    const d1ValueRelation = d1.manyRelation('value');
    expect(d1ValueRelation.size).toBe(1);
    expect(d1ValueRelation.has(str)).toBe(true);

    debug('‚úÖ queryField handles all relation types correctly');
  });

  it('should handle queryField reactive tracking', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);

    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç queryField
    const typeAResult = deep.queryField('type', A);
    expect(typeAResult.size).toBe(2);
    expect(typeAResult.has(a1)).toBe(true);
    expect(typeAResult.has(a2)).toBe(true);

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    let addedCount = 0;
    let deletedCount = 0;
    typeAResult.on(deep.events.dataAdd, () => addedCount++);
    typeAResult.on(deep.events.dataDelete, () => deletedCount++);

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Ç–∏–ø–∞ A
    const a3 = new deep();
    (a3 as any).type = A;

    expect(typeAResult.size).toBe(3);
    expect(typeAResult.has(a3)).toBe(true);
    expect(addedCount).toBe(1);

    // –ú–µ–Ω—è–µ–º —Ç–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞
    (a3 as any).type = B;

    expect(typeAResult.size).toBe(2);
    expect(typeAResult.has(a3)).toBe(false);
    expect(deletedCount).toBe(1);

    debug('‚úÖ queryField handles reactive tracking correctly');
  });

  it('should reject non-Deep instance values in STAGE 1', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);

    // –í –≠–¢–ê–ü–ï 1 queryField –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ç–æ–ª—å–∫–æ Deep instances
    expect(() => {
      deep.queryField('type', 'string');
    }).toThrow();

    expect(() => {
      deep.queryField('type', 123);
    }).toThrow();

    expect(() => {
      deep.queryField('type', { nested: 'object' });
    }).toThrow();

    expect(() => {
      deep.queryField('type', null);
    }).toThrow();

    expect(() => {
      deep.queryField('type', undefined);
    }).toThrow();

    debug('‚úÖ queryField correctly rejects non-Deep values in STAGE 1');
  });

  it('should validate field names', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);

    // –î–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ –ø–æ–ª—è
    expect(() => deep.queryField('type', A)).not.toThrow();
    expect(() => deep.queryField('typed', a1)).not.toThrow();
    expect(() => deep.queryField('from', a1)).not.toThrow();
    expect(() => deep.queryField('out', b1)).not.toThrow();
    expect(() => deep.queryField('to', a2)).not.toThrow();
    expect(() => deep.queryField('in', c1)).not.toThrow();
    expect(() => deep.queryField('value', str)).not.toThrow();
    expect(() => deep.queryField('valued', d1)).not.toThrow();

    // –î–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω—è—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –ø–æ–ª—è
    expect(() => deep.queryField('invalid', A)).toThrow();
    expect(() => deep.queryField('unknown', A)).toThrow();
    expect(() => deep.queryField('', A)).toThrow();

    debug('‚úÖ queryField validates field names correctly');
  });

  it('should handle all theoretical queryField combinations with dataset', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);

    // –ü–û–õ–ù–û–ï –ü–û–ö–†–´–¢–ò–ï: –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ queryField —Å –¥–∞—Ç–∞—Å–µ—Ç–æ–º

    // TYPE –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –∫—Ç–æ –∏–º–µ–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–∏–ø
    const whoHasTypeA = deep.queryField('type', A);
    expect(whoHasTypeA.size).toBe(2);
    expect(whoHasTypeA.has(a1)).toBe(true);
    expect(whoHasTypeA.has(a2)).toBe(true);

    const whoHasTypeB = deep.queryField('type', B);
    expect(whoHasTypeB.size).toBe(2);
    expect(whoHasTypeB.has(b1)).toBe(true);
    expect(whoHasTypeB.has(b2)).toBe(true);

    const whoHasTypeC = deep.queryField('type', C);
    expect(whoHasTypeC.size).toBe(2);
    expect(whoHasTypeC.has(c1)).toBe(true);
    expect(whoHasTypeC.has(c2)).toBe(true);

    const whoHasTypeD = deep.queryField('type', D);
    expect(whoHasTypeD.size).toBe(2);
    expect(whoHasTypeD.has(d1)).toBe(true);
    expect(whoHasTypeD.has(d2)).toBe(true);

    // TYPED –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –∫—Ç–æ —è–≤–ª—è–µ—Ç—Å—è —Ç–∏–ø–æ–º –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    const typeOfA1 = deep.queryField('typed', a1);
    expect(typeOfA1.size).toBe(1);
    expect(typeOfA1.has(A)).toBe(true);

    const typeOfB1 = deep.queryField('typed', b1);
    expect(typeOfB1.size).toBe(1);
    expect(typeOfB1.has(B)).toBe(true);

    // FROM –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –∫—Ç–æ —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–∞–∫ –Ω–∞ from
    const whoPointsFromA1 = deep.queryField('from', a1);
    expect(whoPointsFromA1.size).toBe(2);
    expect(whoPointsFromA1.has(b1)).toBe(true);
    expect(whoPointsFromA1.has(b2)).toBe(true);

    // OUT –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –Ω–∞ –∫–æ–≥–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –∫–∞–∫ –Ω–∞ from
    const whereB1PointsFrom = deep.queryField('out', b1);
    expect(whereB1PointsFrom.size).toBe(1);
    expect(whereB1PointsFrom.has(a1)).toBe(true);

    // TO –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –∫—Ç–æ —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–∞–∫ –Ω–∞ to
    const whoPointsToA2 = deep.queryField('to', a2);
    expect(whoPointsToA2.size).toBe(2);
    expect(whoPointsToA2.has(c1)).toBe(true);
    expect(whoPointsToA2.has(c2)).toBe(true);

    // IN –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –Ω–∞ –∫–æ–≥–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –∫–∞–∫ –Ω–∞ to
    const whereC1PointsTo = deep.queryField('in', c1);
    expect(whereC1PointsTo.size).toBe(1);
    expect(whereC1PointsTo.has(a2)).toBe(true);

    // VALUE –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –∫—Ç–æ —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–∞–∫ –Ω–∞ value
    const whoPointsValueStr = deep.queryField('value', str);
    expect(whoPointsValueStr.size).toBe(2);
    expect(whoPointsValueStr.has(d1)).toBe(true);
    expect(whoPointsValueStr.has(d2)).toBe(true);

    // VALUED –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –Ω–∞ –∫–æ–≥–æ —Å—Å—ã–ª–∞–µ—Ç—Å—è d1 –∫–∞–∫ –Ω–∞ value
    const whereD1PointsValue = deep.queryField('valued', d1);
    expect(whereD1PointsValue.size).toBe(1);
    expect(whereD1PointsValue.has(str)).toBe(true);

    // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ—Å—Ç: –Ω–∞ —á—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç d1 –∫–∞–∫ –Ω–∞ value
    const valueD1Result = deep.queryField('value', d1);
    expect(valueD1Result.size).toBe(0); // –ù–∏–∫—Ç–æ –Ω–µ —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ d1 –∫–∞–∫ –Ω–∞ value

    // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Ç–æ –Ω–∞ —á—Ç–æ —Å—Å—ã–ª–∞–µ—Ç—Å—è d1, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ
    const d1ValueRelation = d1.manyRelation('value');
    expect(d1ValueRelation.size).toBe(1);
    expect(d1ValueRelation.has(str)).toBe(true);

    debug('‚úÖ queryField handles all theoretical combinations correctly');
  });

  it('should handle queryField with empty results', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);

    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –±–µ–∑ —Å–≤—è–∑–µ–π
    const orphan = new deep();
    const loneType = new deep();

    // –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–∏–ø–∞
    const whoHasOrphanType = deep.queryField('type', orphan);
    expect(whoHasOrphanType.size).toBe(0);

    // –ü–æ–∏—Å–∫ —Ç–∏–ø–∞ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ –±–µ–∑ —Ç–∏–ø–∞ (—É orphan —Ç–∏–ø = deep, –Ω–æ –Ω–µ loneType)
    const typeOfLoneType = deep.queryField('typed', loneType);
    expect(typeOfLoneType.size).toBe(1); // deep
    expect(typeOfLoneType.has(deep._deep)).toBe(true);

    // –ü–æ–∏—Å–∫ from —Å–≤—è–∑–µ–π –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ –±–µ–∑ out —Å–≤—è–∑–µ–π
    const whoPointsFromOrphan = deep.queryField('from', orphan);
    expect(whoPointsFromOrphan.size).toBe(0);

    // –ü–æ–∏—Å–∫ out —Å–≤—è–∑–µ–π –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ –±–µ–∑ from
    const whereOrphanPointsFrom = deep.queryField('out', orphan);
    expect(whereOrphanPointsFrom.size).toBe(0);

    debug('‚úÖ queryField handles empty results correctly');
  });

  it('should handle queryField tracking with type changes', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);

    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Ç–∏–ø–∞ A
    const typeAResult = deep.queryField('type', A);
    expect(typeAResult.size).toBe(2);

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    let addedCount = 0;
    let deletedCount = 0;
    typeAResult.on(deep.events.dataAdd, () => addedCount++);
    typeAResult.on(deep.events.dataDelete, () => deletedCount++);

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø A
    const a3 = new deep();
    a3.type = A;

    expect(typeAResult.size).toBe(3);
    expect(typeAResult.has(a3)).toBe(true);
    expect(addedCount).toBe(1);

    // –ú–µ–Ω—è–µ–º —Ç–∏–ø –Ω–∞ B
    a3.type = B;

    expect(typeAResult.size).toBe(2);
    expect(typeAResult.has(a3)).toBe(false);
    expect(deletedCount).toBe(1);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–∏–ø A
    a3.type = A;

    expect(typeAResult.size).toBe(3);
    expect(typeAResult.has(a3)).toBe(true);
    expect(addedCount).toBe(2);

    debug('‚úÖ queryField tracking handles type changes correctly');
  });

  it('should handle queryField tracking with from/out changes', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);

    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è from = a1
    const fromA1Result = deep.queryField('from', a1);
    expect(fromA1Result.size).toBe(2); // b1, b2

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    let addedCount = 0;
    let deletedCount = 0;
    fromA1Result.on(deep.events.dataAdd, () => addedCount++);
    fromA1Result.on(deep.events.dataDelete, () => deletedCount++);

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º from = a1
    const b3 = new deep();
    b3.type = B;
    b3.from = a1;

    expect(fromA1Result.size).toBe(3);
    expect(fromA1Result.has(b3)).toBe(true);
    expect(addedCount).toBe(1);

    // –ú–µ–Ω—è–µ–º from –Ω–∞ a2
    b3.from = a2;

    expect(fromA1Result.size).toBe(2);
    expect(fromA1Result.has(b3)).toBe(false);
    expect(deletedCount).toBe(1);

    // –£–¥–∞–ª—è–µ–º from
    delete b3.from;

    expect(fromA1Result.size).toBe(2);
    expect(deletedCount).toBe(1); // –Ω–µ –¥–æ–ª–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º from = a1
    b3.from = a1;

    expect(fromA1Result.size).toBe(3);
    expect(fromA1Result.has(b3)).toBe(true);
    expect(addedCount).toBe(2);

    debug('‚úÖ queryField tracking handles from/out changes correctly');
  });

  it('should handle queryField tracking with to/in changes', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);

    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è to = a2
    const toA2Result = deep.queryField('to', a2);
    expect(toA2Result.size).toBe(2); // c1, c2

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    let addedCount = 0;
    let deletedCount = 0;
    toA2Result.on(deep.events.dataAdd, () => addedCount++);
    toA2Result.on(deep.events.dataDelete, () => deletedCount++);

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º to = a2
    const c3 = new deep();
    c3.type = C;
    c3.to = a2;

    expect(toA2Result.size).toBe(3);
    expect(toA2Result.has(c3)).toBe(true);
    expect(addedCount).toBe(1);

    // –ú–µ–Ω—è–µ–º to –Ω–∞ a1
    c3.to = a1;

    expect(toA2Result.size).toBe(2);
    expect(toA2Result.has(c3)).toBe(false);
    expect(deletedCount).toBe(1);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º to = a2
    c3.to = a2;

    expect(toA2Result.size).toBe(3);
    expect(toA2Result.has(c3)).toBe(true);
    expect(addedCount).toBe(2);

    debug('‚úÖ queryField tracking handles to/in changes correctly');
  });

  it('should handle queryField tracking with value/valued changes', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);

    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è value = str
    const valueStrResult = deep.queryField('value', str);
    expect(valueStrResult.size).toBe(2); // d1, d2

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    let addedCount = 0;
    let deletedCount = 0;
    valueStrResult.on(deep.events.dataAdd, () => addedCount++);
    valueStrResult.on(deep.events.dataDelete, () => deletedCount++);

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º value = str
    const d3 = new deep();
    d3.type = D;
    d3.value = str;

    expect(valueStrResult.size).toBe(3);
    expect(valueStrResult.has(d3)).toBe(true);
    expect(addedCount).toBe(1);

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –∏ –º–µ–Ω—è–µ–º value
    const str2 = new deep.String('xyz');
    d3.value = str2;

    expect(valueStrResult.size).toBe(2);
    expect(valueStrResult.has(d3)).toBe(false);
    expect(deletedCount).toBe(1);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º value = str
    d3.value = str;

    expect(valueStrResult.size).toBe(3);
    expect(valueStrResult.has(d3)).toBe(true);
    expect(addedCount).toBe(2);

    debug('‚úÖ queryField tracking handles value/valued changes correctly');
  });

  it('should handle queryField with multiple simultaneous changes', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);

    // –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    const typeAResult = deep.queryField('type', A);
    const fromA1Result = deep.queryField('from', a1);
    const toA2Result = deep.queryField('to', a2);

    expect(typeAResult.size).toBe(2);
    expect(fromA1Result.size).toBe(2);
    expect(toA2Result.size).toBe(2);

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–æ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    let typeAChanges = 0;
    let fromA1Changes = 0;
    let toA2Changes = 0;

    typeAResult.on(deep.events.dataChanged, () => typeAChanges++);
    fromA1Result.on(deep.events.dataChanged, () => fromA1Changes++);
    toA2Result.on(deep.events.dataChanged, () => toA2Changes++);

    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –∫–æ—Ç–æ—Ä—ã–π –≤–ª–∏—è–µ—Ç –Ω–∞ –≤—Å–µ —Ç—Ä–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    const multiElement = new deep();
    multiElement.type = A;  // –í–ª–∏—è–µ—Ç –Ω–∞ typeAResult
    multiElement.from = a1; // –í–ª–∏—è–µ—Ç –Ω–∞ fromA1Result
    multiElement.to = a2;   // –í–ª–∏—è–µ—Ç –Ω–∞ toA2Result

    expect(typeAResult.size).toBe(3);
    expect(fromA1Result.size).toBe(3);
    expect(toA2Result.size).toBe(3);

    expect(typeAChanges).toBeGreaterThan(0);
    expect(fromA1Changes).toBeGreaterThan(0);
    expect(toA2Changes).toBeGreaterThan(0);

    // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –≤—Å–µ—Ö —Å–≤—è–∑–µ–π
    delete (multiElement as any).type;
    delete (multiElement as any).from;
    delete (multiElement as any).to;

    expect(typeAResult.size).toBe(2);
    expect(fromA1Result.size).toBe(2);
    expect(toA2Result.size).toBe(2);

    debug('‚úÖ queryField handles multiple simultaneous changes correctly');
  });

  it('should handle queryField with cross-reference scenarios', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);

    // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏
    const crossRef1 = new deep();
    const crossRef2 = new deep();

    crossRef1.type = A;
    crossRef2.type = A;
    crossRef1.from = crossRef2;
    crossRef2.from = crossRef1;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º queryField –¥–ª—è –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
    const typeAResult = deep.queryField('type', A);
    expect(typeAResult.has(crossRef1)).toBe(true);
    expect(typeAResult.has(crossRef2)).toBe(true);

    const fromCrossRef1Result = deep.queryField('from', crossRef1);
    expect(fromCrossRef1Result.has(crossRef2)).toBe(true);

    const fromCrossRef2Result = deep.queryField('from', crossRef2);
    expect(fromCrossRef2Result.has(crossRef1)).toBe(true);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–≤—è–∑–∏
    const outCrossRef1Result = deep.queryField('out', crossRef1);
    expect(outCrossRef1Result.has(crossRef2)).toBe(true);

    const outCrossRef2Result = deep.queryField('out', crossRef2);
    expect(outCrossRef2Result.has(crossRef1)).toBe(true);

    debug('‚úÖ queryField handles cross-reference scenarios correctly');
  });

  it('should handle queryField with chain modifications', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);

    // –°–æ–∑–¥–∞–µ–º —Ü–µ–ø–æ—á–∫—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const chain1 = new deep();
    const chain2 = new deep();
    const chain3 = new deep();

    chain1.type = A;
    chain2.type = A;
    chain3.type = A;

    chain1.from = chain2;
    chain2.from = chain3;

    const typeAResult = deep.queryField('type', A);
    const initialSize = typeAResult.size;

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    let changeCount = 0;
    typeAResult.on(deep.events.dataChanged, () => changeCount++);

    // –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ü–µ–ø–æ—á–∫—É
    (chain1 as any).type = B; // –£–¥–∞–ª—è–µ—Ç—Å—è –∏–∑ A
    expect(typeAResult.size).toBe(initialSize - 1);

    (chain3 as any).type = B; // –£–¥–∞–ª—è–µ—Ç—Å—è –∏–∑ A
    expect(typeAResult.size).toBe(initialSize - 2);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ü–µ–ø–æ—á–∫—É
    (chain1 as any).type = A;
    (chain3 as any).type = A;
    expect(typeAResult.size).toBe(initialSize);

    expect(changeCount).toBeGreaterThan(0);

    debug('‚úÖ queryField handles chain modifications correctly');
  });

  it('should handle queryField performance with large datasets', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);

    const startTime = Date.now();

    // –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–æ–π –Ω–∞–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const elements: any[] = [];
    for (let i = 0; i < 100; i++) {
      const element = new deep();
      (element as any).type = A;
      elements.push(element);
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç queryField
    const typeAResult = deep.query({ type: A });
    expect(typeAResult.size).toBe(102); // 2 –∏—Å—Ö–æ–¥–Ω—ã—Ö + 100 –Ω–æ–≤—ã—Ö

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–∞—Å—Å–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
    for (let i = 0; i < 50; i++) {
      (elements[i] as any).type = B;
    }

    expect(typeAResult.size).toBe(52); // 2 –∏—Å—Ö–æ–¥–Ω—ã—Ö + 50 –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    for (let i = 0; i < 50; i++) {
      (elements[i] as any).type = A;
    }

    expect(typeAResult.size).toBe(102);

    const endTime = Date.now();
    const duration = endTime - startTime;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –±—ã—Å—Ç—Ä–æ (–º–µ–Ω–µ–µ 5 —Å–µ–∫—É–Ω–¥)
    expect(duration).toBeLessThan(5000);

    debug('‚úÖ queryField handles large datasets efficiently in', duration, 'ms');
  });

  it('should handle complex multi-field reactive tracking', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);

    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–æ–∂–Ω–æ–≥–æ query - –∏—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–∏–ø–∞ A
    const complexQuery = deep.query({ type: A });
    expect(complexQuery.size).toBe(2); // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ a1 –∏ a2
    expect(complexQuery.has(a1)).toBe(true);
    expect(complexQuery.has(a2)).toBe(true);

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    let changeCount = 0;
    complexQuery.on(deep.events.dataChanged, () => changeCount++);

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–æ—Ç–æ—Ä—ã–π —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è–º
    const a3 = new deep();
    (a3 as any).type = A;



    // –¢–µ–ø–µ—Ä—å a3 –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ query
    expect(complexQuery.size).toBe(3); // a1, a2, a3
    expect(complexQuery.has(a1)).toBe(true);
    expect(complexQuery.has(a2)).toBe(true);
    expect(complexQuery.has(a3)).toBe(true);
    expect(changeCount).toBeGreaterThan(0);

    // –ú–µ–Ω—è–µ–º —Ç–∏–ø a3 - –æ–Ω –¥–æ–ª–∂–µ–Ω –∏—Å—á–µ–∑–Ω—É—Ç—å –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    (a3 as any).type = B;

    expect(complexQuery.size).toBe(2); // –û—Å—Ç–∞—é—Ç—Å—è a1, a2
    expect(complexQuery.has(a1)).toBe(true);
    expect(complexQuery.has(a2)).toBe(true);
    expect(complexQuery.has(a3)).toBe(false);

    debug('‚úÖ query handles complex multi-field reactive tracking correctly');
  });

  it('should validate query expressions', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);

    // –î–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
    expect(() => deep.query({ type: A })).not.toThrow();
    expect(() => deep.query({ type: A, from: a1 })).not.toThrow();

    // –î–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω—è—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    expect(() => deep.query(null)).toThrow();
    expect(() => deep.query(undefined)).toThrow();
    expect(() => deep.query('string')).toThrow();
    expect(() => deep.query(123)).toThrow();
    expect(() => deep.query([])).toThrow();
    expect(deep.query({}).size).toBe(deep._ids.size);

    // –î–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω—è—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –ø–æ–ª—è
    expect(() => deep.query({ invalid: A })).toThrow();
    expect(() => deep.query({ type: A, unknown: B })).toThrow();

    // –í –≠–¢–ê–ü–ï 1 –¥–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω—è—Ç—å non-Deep –∑–Ω–∞—á–µ–Ω–∏—è
    expect(() => deep.query({ type: 'string' })).toThrow();
    expect(() => deep.query({ type: 123 })).toThrow();
    expect(() => deep.query({ type: { nested: 'object' } })).toThrow();

    debug('‚úÖ query validates expressions correctly');
  });

  it('should handle query with identical field values', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);

    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ–ª–µ–π
    const twin1 = new deep();
    const twin2 = new deep();

    (twin1 as any).type = A;
    (twin2 as any).type = A;
    (twin1 as any).from = a1;
    (twin2 as any).from = a1;

    // Query –¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ –æ–±–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
    const twinsQuery = deep.query({ type: A, from: a1 });
    expect(twinsQuery.has(twin1)).toBe(true);
    expect(twinsQuery.has(twin2)).toBe(true);

    // –ò–∑–º–µ–Ω—è–µ–º –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç
    (twin1 as any).from = a2;

    // –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–∏—Ç—å—Å—è
    expect(twinsQuery.has(twin1)).toBe(false);
    expect(twinsQuery.has(twin2)).toBe(true);

    debug('‚úÖ query handles identical field values correctly');
  });

  it('should handle query with cross-references', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);

    // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏
    const cross1 = new deep();
    const cross2 = new deep();

    (cross1 as any).type = A;
    (cross2 as any).type = A;
    (cross1 as any).from = cross2;
    (cross2 as any).from = cross1;

    // Query –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ç–∏–ø–∞ A –∫–æ—Ç–æ—Ä—ã–µ —Å—Å—ã–ª–∞—é—Ç—Å—è –Ω–∞ cross1
    const crossQuery1 = deep.query({ type: A, from: cross1 });
    expect(crossQuery1.has(cross2)).toBe(true);
    expect(crossQuery1.has(cross1)).toBe(false);

    // Query –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ç–∏–ø–∞ A –∫–æ—Ç–æ—Ä—ã–µ —Å—Å—ã–ª–∞—é—Ç—Å—è –Ω–∞ cross2
    const crossQuery2 = deep.query({ type: A, from: cross2 });
    expect(crossQuery2.has(cross1)).toBe(true);
    expect(crossQuery2.has(cross2)).toBe(false);

    // –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π query
    const bothCrossQuery = deep.query({ type: A, out: cross1, in: cross2 });
    // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–∏–ø–∞ A, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Å—Å—ã–ª–∞–µ—Ç—Å—è cross1 –∫–∞–∫ from –ò –∫–æ—Ç–æ—Ä—ã–µ —Å—Å—ã–ª–∞—é—Ç—Å—è –Ω–∞ cross2 –∫–∞–∫ to

    debug('‚úÖ query handles cross-references correctly');
  });

  it('should handle query performance with large datasets', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);

    const startTime = Date.now();

    // –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–æ–π –Ω–∞–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const elements: any[] = [];
    for (let i = 0; i < 100; i++) {
      const element = new deep();
      (element as any).type = A;
      if (i % 2 === 0) {
        (element as any).from = a1;
      }
      elements.push(element);
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç queryField
    const typeAResult = deep.query({ type: A });
    expect(typeAResult.size).toBe(102); // 2 –∏—Å—Ö–æ–¥–Ω—ã—Ö + 100 –Ω–æ–≤—ã—Ö

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–∞—Å—Å–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
    for (let i = 0; i < 50; i++) {
      (elements[i] as any).type = B;
    }

    expect(typeAResult.size).toBe(52); // 2 –∏—Å—Ö–æ–¥–Ω—ã—Ö + 50 –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    for (let i = 0; i < 50; i++) {
      (elements[i] as any).type = A;
    }

    expect(typeAResult.size).toBe(102);

    const endTime = Date.now();
    const duration = endTime - startTime;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –±—ã—Å—Ç—Ä–æ (–º–µ–Ω–µ–µ 5 —Å–µ–∫—É–Ω–¥)
    expect(duration).toBeLessThan(5000);

    debug('‚úÖ query handles large datasets efficiently in', duration, 'ms');
  });

  it('should handle query with chain relationships', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);

    // –°–æ–∑–¥–∞–µ–º —Ü–µ–ø–æ—á–∫—É —Å–≤—è–∑–µ–π
    const chain1 = new deep();
    const chain2 = new deep();
    const chain3 = new deep();

    (chain1 as any).type = A;
    (chain2 as any).type = B;
    (chain3 as any).type = C;

    (chain2 as any).from = chain1;
    (chain3 as any).from = chain2;

    // Query –¥–ª—è –ø–æ–∏—Å–∫–∞ B-—ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ —Å—Å—ã–ª–∞—é—Ç—Å—è –Ω–∞ A-—ç–ª–µ–º–µ–Ω—Ç—ã
    const chainQuery = deep.query({ type: B, from: chain1 });
    expect(chainQuery.has(chain2)).toBe(true);

    // Query –¥–ª—è –ø–æ–∏—Å–∫–∞ C-—ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ —Å—Å—ã–ª–∞—é—Ç—Å—è –Ω–∞ B-—ç–ª–µ–º–µ–Ω—Ç—ã
    const chainQuery2 = deep.query({ type: C, from: chain2 });
    expect(chainQuery2.has(chain3)).toBe(true);

    // –ò–∑–º–µ–Ω—è–µ–º —Ü–µ–ø–æ—á–∫—É
    (chain2 as any).from = chain3; // –°–æ–∑–¥–∞–µ–º —Ü–∏–∫–ª

    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –æ–±–Ω–æ–≤–∏—Ç—å—Å—è
    expect(chainQuery.has(chain2)).toBe(false);

    const cyclicQuery = deep.query({ type: B, from: chain3 });
    expect(cyclicQuery.has(chain2)).toBe(true);

    debug('‚úÖ query handles chain relationships correctly');
  });
});

describe('query', () => {
  let deep: any;

  beforeEach(() => {
    debug('üß™ Setting up test environment for query');
    deep = newDeep();
  });

  it('should handle basic single field queries', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);

    // –ê–∫—Å–∏–æ–º–∞: deep.query({ type: A }) // { a1, a2 }
    const typeAQuery = deep.query({ type: A });
    expect(typeAQuery.type.is(deep.Set)).toBe(true);
    expect(typeAQuery.size).toBe(2);
    expect(typeAQuery.has(a1)).toBe(true);
    expect(typeAQuery.has(a2)).toBe(true);

    // –ê–∫—Å–∏–æ–º–∞: deep.query({ typed: a1 }) // { A }
    const typedA1Query = deep.query({ typed: a1 });
    expect(typedA1Query.size).toBe(1);
    expect(typedA1Query.has(A)).toBe(true);

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ç–∏–ø—ã –ø–æ–ª–µ–π
    const fromA1Query = deep.query({ from: a1 });
    expect(fromA1Query.size).toBe(2);
    expect(fromA1Query.has(b1)).toBe(true);
    expect(fromA1Query.has(b2)).toBe(true);

    const outB1Query = deep.query({ out: b1 });
    expect(outB1Query.size).toBe(1);
    expect(outB1Query.has(a1)).toBe(true);

    const toA2Query = deep.query({ to: a2 });
    expect(toA2Query.size).toBe(2);
    expect(toA2Query.has(c1)).toBe(true);
    expect(toA2Query.has(c2)).toBe(true);

    const inC1Query = deep.query({ in: c1 });
    expect(inC1Query.size).toBe(1);
    expect(inC1Query.has(a2)).toBe(true);

    const valueStrQuery = deep.query({ value: str });
    expect(valueStrQuery.size).toBe(2);
    expect(valueStrQuery.has(d1)).toBe(true);
    expect(valueStrQuery.has(d2)).toBe(true);

    const valuedD1Query = deep.query({ valued: d1 });
    expect(valuedD1Query.size).toBe(1);
    expect(valuedD1Query.has(str)).toBe(true);

    // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ—Å—Ç: –Ω–∞–π—Ç–∏ —Ç–æ –Ω–∞ —á—Ç–æ —Å—Å—ã–ª–∞–µ—Ç—Å—è d1 –∫–∞–∫ –Ω–∞ value
    const valueD1Result = deep.queryField('value', d1);
    expect(valueD1Result.size).toBe(0); // –ù–∏–∫—Ç–æ –Ω–µ —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ d1 –∫–∞–∫ –Ω–∞ value

    // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Ç–æ –Ω–∞ —á—Ç–æ —Å—Å—ã–ª–∞–µ—Ç—Å—è d1, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ
    const d1ValueRelation = d1.manyRelation('value');
    expect(d1ValueRelation.size).toBe(1);
    expect(d1ValueRelation.has(str)).toBe(true);

    debug('‚úÖ query handles basic single field queries correctly');
  });

  it('should handle multi-field AND queries', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);

    // –ê–∫—Å–∏–æ–º–∞: deep.query({ type: A, out: b1 }) // { a1 }
    // –ò—â–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç —Ç–∏–ø A –ò –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Å—Å—ã–ª–∞–µ—Ç—Å—è b1 –∫–∞–∫ –Ω–∞ from
    const typeAOutB1Query = deep.query({ type: A, out: b1 });
    expect(typeAOutB1Query.size).toBe(1);
    expect(typeAOutB1Query.has(a1)).toBe(true);
    expect(typeAOutB1Query.has(a2)).toBe(false); // a2 –Ω–µ –∏–º–µ–µ—Ç out —Å–≤—è–∑–∏ —Å b1

    // –ö–æ–º–±–∏–Ω–∞—Ü–∏—è type + in
    const typeAInC1Query = deep.query({ type: A, in: c1 });
    expect(typeAInC1Query.size).toBe(1);
    expect(typeAInC1Query.has(a2)).toBe(true);
    expect(typeAInC1Query.has(a1)).toBe(false); // a1 –Ω–µ –∏–º–µ–µ—Ç in —Å–≤—è–∑–∏ —Å c1

    // –ö–æ–º–±–∏–Ω–∞—Ü–∏—è type + value (–ù–ï valued!)
    const typeDValueStrQuery = deep.query({ type: D, value: str });
    expect(typeDValueStrQuery.size).toBe(2);
    expect(typeDValueStrQuery.has(d1)).toBe(true);
    expect(typeDValueStrQuery.has(d2)).toBe(true);

    // –ö–æ–º–±–∏–Ω–∞—Ü–∏—è –∏–∑ –¥–≤—É—Ö –ø–æ–ª–µ–π (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ - —É–±—Ä–∞–Ω–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ)
    const tripleQuery = deep.query({ type: B, from: a1 });
    expect(tripleQuery.size).toBe(2); // b1 –∏ b2 —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—Ç –≤—Å–µ–º —É—Å–ª–æ–≤–∏—è–º
    expect(tripleQuery.has(b1)).toBe(true);
    expect(tripleQuery.has(b2)).toBe(true);

    debug('‚úÖ query handles multi-field AND queries correctly');
  });

  it('should handle queries with no results', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);

    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –±–µ–∑ —Å–≤—è–∑–µ–π
    const orphan = new deep();

    // –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–∏–ø–∞
    const orphanTypeQuery = deep.query({ type: orphan });
    expect(orphanTypeQuery.size).toBe(0);

    // –ü–æ–∏—Å–∫ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
    const impossibleQuery = deep.query({ type: A, from: str }); // A-—ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –º–æ–≥—É—Ç –∏–º–µ—Ç—å from = str
    expect(impossibleQuery.size).toBe(0);

    // –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–µ–π –ø–æ–ª–µ–π
    const contradictoryQuery = deep.query({ type: A, from: A }); // A-—ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –º–æ–≥—É—Ç —Å—Å—ã–ª–∞—Ç—å—Å—è —Å–∞–º–∏ –Ω–∞ —Å–µ–±—è –≤ –Ω–∞—à–µ–º –¥–∞—Ç–∞—Å–µ—Ç–µ
    expect(contradictoryQuery.size).toBe(0);

    debug('‚úÖ query handles queries with no results correctly');
  });

  it('should handle query reactive tracking', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);

    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç query
    const typeAQuery = deep.query({ type: A });
    expect(typeAQuery.size).toBe(2);

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    let addedCount = 0;
    let deletedCount = 0;
    typeAQuery.on(deep.events.dataAdd, () => addedCount++);
    typeAQuery.on(deep.events.dataDelete, () => deletedCount++);

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Ç–∏–ø–∞ A
    const a3 = new deep();
    (a3 as any).type = A;

    expect(typeAQuery.size).toBe(3);
    expect(typeAQuery.has(a3)).toBe(true);
    expect(addedCount).toBe(1);

    // –ú–µ–Ω—è–µ–º —Ç–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞
    (a3 as any).type = B;

    expect(typeAQuery.size).toBe(2);
    expect(typeAQuery.has(a3)).toBe(false);
    expect(deletedCount).toBe(1);

    debug('‚úÖ query handles reactive tracking correctly');
  });

  // –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ deep.Not —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ deep.query()
  describe('DIAGNOSTIC: deep.Not with deep.query results', () => {
    it('should verify that deep.query returns deep.Set and deep.Not works with query results', () => {
      const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);

      // –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç a3 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const a3 = new deep();
      (a3 as any).type = A;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ deep.query –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç deep.Set
      const typeAQuery = deep.query({ type: A });
      debug('üîç typeAQuery type check:', typeAQuery.constructor.name);
      debug('üîç typeAQuery is deep.Set:', typeAQuery.type && typeAQuery.type.is(deep.Set));
      debug('üîç typeAQuery size:', typeAQuery.size);

      expect(typeAQuery.type.is(deep.Set)).toBe(true);
      expect(typeAQuery.size).toBe(3); // a1, a2, a3

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å
      const toCQuery = deep.query({ to: a2 }); // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ —Å—Å—ã–ª–∞—é—Ç—Å—è –Ω–∞ a2 –∫–∞–∫ –Ω–∞ to
      debug('üîç toCQuery type check:', toCQuery.constructor.name);
      debug('üîç toCQuery is deep.Set:', toCQuery.type && toCQuery.type.is(deep.Set));
      debug('üîç toCQuery size:', toCQuery.size);

      expect(toCQuery.type.is(deep.Set)).toBe(true);
      expect(toCQuery.size).toBe(2); // c1 –∏ c2 (–æ–±–∞ —Å—Å—ã–ª–∞—é—Ç—Å—è –Ω–∞ a2)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      const typeAElements = Array.from(typeAQuery);
      const toCElements = Array.from(toCQuery);

      debug('üîç typeAQuery elements:', typeAElements.map((e: any) => e._id));
      debug('üîç toCQuery elements:', toCElements.map((e: any) => e._id));

      expect(typeAElements.length).toBe(3);
      expect(toCElements.length).toBe(2);
      expect(toCElements.some((e: any) => e._id === c1._id)).toBe(true);
      expect(toCElements.some((e: any) => e._id === c2._id)).toBe(true);

      // –¢–µ–ø–µ—Ä—å –ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å deep.Not(typeAQuery, toCQuery)
      // –û–∂–∏–¥–∞–µ–º: —ç–ª–µ–º–µ–Ω—Ç—ã —Å type: A, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –∏–º–µ—é—Ç to: a2
      // –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å a1, a3 (–Ω–æ –Ω–µ a2)

      debug('üîß Creating deep.Not(typeAQuery, toCQuery)...');

      try {
        // –í–ê–ñ–ù–û: deep.Not –æ–∂–∏–¥–∞–µ—Ç –≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç –∫–∞–∫ deep.Set —Å–æ–¥–µ—Ä–∂–∞—â–∏–π _symbol'—ã –¥—Ä—É–≥–∏—Ö deep.Set
        // –°–æ–∑–¥–∞—ë–º deep.Set –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç _symbol —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ toCQuery
        const excludeSetOfSets = new deep.Set(new Set([toCQuery._symbol]));
        debug('üîß Created excludeSetOfSets with toCQuery._symbol:', toCQuery._symbol);

        const notResult = new deep.Not(typeAQuery, excludeSetOfSets);
        debug('‚úÖ deep.Not created successfully');
        debug('üîç notResult type check:', notResult.constructor.name);
        debug('üîç notResult is deep.Set:', notResult.to && notResult.to.type && notResult.to.type.is(deep.Set));
        debug('üîç notResult.to size:', notResult.to ? notResult.to.size : 'no .to');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ–∂–µ deep.Set (—á–µ—Ä–µ–∑ .to)
        expect(notResult.to.type.is(deep.Set)).toBe(true);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ - –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 3 (–≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–∏–ø–∞ A, —Ç–∞–∫ –∫–∞–∫ –∏—Å–∫–ª—é—á–∞–µ–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã c1,c2 –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è —Å a1,a2,a3)
        expect(notResult.to.size).toBe(3); // a1, a2, a3 –æ—Å—Ç–∞—é—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ c1,c2 –Ω–µ —è–≤–ª—è—é—Ç—Å—è —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Ç–∏–ø–∞ A

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        const notElements = Array.from(notResult.to);
        debug('üîç notResult elements:', notElements.map((e: any) => e._id));

        const notElementIds = notElements.map((e: any) => e._id).sort();
        const expectedIds = [a1._id, a2._id, a3._id].sort();

        expect(notElementIds).toEqual(expectedIds);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–∏–ø–∞ A –í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ (—Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è —Å c1, c2)
        expect(notResult.to.has(a1)).toBe(true);
        expect(notResult.to.has(a2)).toBe(true);
        expect(notResult.to.has(a3)).toBe(true);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ c1 –∏ c2 –ù–ï –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ (–æ–Ω–∏ –∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å, —Ç–∞–∫ –∫–∞–∫ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Ç–∏–ø–∞ A)
        expect(notResult.to.has(c1)).toBe(false);
        expect(notResult.to.has(c2)).toBe(false);

        debug('‚úÖ DIAGNOSTIC TEST PASSED: deep.Not works correctly with deep.query results');

      } catch (error: any) {
        debug('‚ùå DIAGNOSTIC TEST FAILED:', error.message);
        debug('‚ùå Error details:', error);
        throw error;
      }
    });
  });

  // –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ê–ù–û–ú–ê–õ–ò–ò: —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –º–µ—Ç–æ–¥—ã query, queryField, And, Or, Not
  describe('INVESTIGATION: Return types of query methods', () => {
    it('should investigate what each method actually returns', () => {
      const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);

      // –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç a3 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const a3 = new deep();
      (a3 as any).type = A;

      debug('üîç === –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ù–ê–ß–ê–¢–û ===');

      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç queryField
      debug('üîç 1. –ü–†–û–í–ï–†–ö–ê queryField');
      const queryFieldResult = deep.queryField('type', A);
      debug('üîç queryField result constructor:', queryFieldResult.constructor.name);
      debug('üîç queryField result._id:', queryFieldResult._id);
      debug('üîç queryField result.type exists:', !!queryFieldResult.type);
      debug('üîç queryField result.type._id:', queryFieldResult.type?._id);
      debug('üîç queryField result.type.is(deep.Set):', queryFieldResult.type?.is(deep.Set));
      debug('üîç queryField result size:', queryFieldResult.size);

      expect(queryFieldResult.type.is(deep.Set)).toBe(true);
      debug('‚úÖ queryField –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç deep.Set');

      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç deep.And –Ω–∞–ø—Ä—è–º—É—é
      debug('üîç 2. –ü–†–û–í–ï–†–ö–ê deep.And –Ω–∞–ø—Ä—è–º—É—é');
      const set1 = new deep.Set(new Set([a1._symbol, a2._symbol]));
      const set2 = new deep.Set(new Set([a1._symbol, a3._symbol]));
      const setsForAnd = new deep.Set(new Set([set1._symbol, set2._symbol]));

      debug('üîç Creating And with sets:', setsForAnd._id);
      const andOperation = new deep.And(undefined, setsForAnd);
      debug('üîç And operation created:', andOperation._id);
      debug('üîç And operation constructor:', andOperation.constructor.name);
      debug('üîç And operation.type exists:', !!andOperation.type);
      debug('üîç And operation.type._id:', andOperation.type?._id);
      debug('üîç And operation.type.is(deep.And):', andOperation.type?.is(deep.And));

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç And.to (—Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏)
      const andResult = andOperation.to;
      debug('üîç And result (.to):', andResult._id);
      debug('üîç And result constructor:', andResult.constructor.name);
      debug('üîç And result.type exists:', !!andResult.type);
      debug('üîç And result.type._id:', andResult.type?._id);
      debug('üîç And result.type.is(deep.Set):', andResult.type?.is(deep.Set));
      debug('üîç And result size:', andResult.size);

      expect(andResult.type.is(deep.Set)).toBe(true);
      debug('‚úÖ deep.And.to –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç deep.Set');

      // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç deep.query
      debug('üîç 3. –ü–†–û–í–ï–†–ö–ê deep.query');
      const queryResult = deep.query({ type: A });
      debug('üîç query result constructor:', queryResult.constructor.name);
      debug('üîç query result._id:', queryResult._id);
      debug('üîç query result.type exists:', !!queryResult.type);
      debug('üîç query result.type._id:', queryResult.type?._id);
      debug('üîç query result.type.is(deep.Set):', queryResult.type?.is(deep.Set));
      debug('üîç query result size:', queryResult.size);

      // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç query?
      debug('üîç query result === andResult?', queryResult._id === andResult._id);
      debug('üîç query result has _state._andOperation?', !!queryResult._state._andOperation);
      if (queryResult._state._andOperation) {
        debug('üîç query result._state._andOperation._id:', queryResult._state._andOperation._id);
        debug('üîç query result._state._andOperation.to._id:', queryResult._state._andOperation.to._id);
        debug('üîç query result._id === _andOperation.to._id?', queryResult._id === queryResult._state._andOperation.to._id);
      }

      expect(queryResult.type.is(deep.Set)).toBe(true);
      debug('‚úÖ deep.query –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç deep.Set');

      // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç deep.Or –Ω–∞–ø—Ä—è–º—É—é
      debug('üîç 4. –ü–†–û–í–ï–†–ö–ê deep.Or –Ω–∞–ø—Ä—è–º—É—é');
      const orOperation = new deep.Or(undefined, setsForAnd);
      const orResult = orOperation.to;
      debug('üîç Or result (.to):', orResult._id);
      debug('üîç Or result constructor:', orResult.constructor.name);
      debug('üîç Or result.type.is(deep.Set):', orResult.type?.is(deep.Set));
      debug('üîç Or result size:', orResult.size);

      expect(orResult.type.is(deep.Set)).toBe(true);
      debug('‚úÖ deep.Or.to –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç deep.Set');

      // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É deep.Not
      debug('üîç 5. –ü–†–û–í–ï–†–ö–ê deep.Not —Å–∏–≥–Ω–∞—Ç—É—Ä—ã');
      debug('üîç Trying to create Not with two deep.Set instances...');

      try {
        // –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å Not —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
        const notOperation = new deep.Not(queryResult, setsForAnd);
        debug('‚úÖ deep.Not created successfully with (deep.Set, deep.Set)');

        const notResult = notOperation.to;
        debug('üîç Not result (.to):', notResult._id);
        debug('üîç Not result constructor:', notResult.constructor.name);
        debug('üîç Not result.type.is(deep.Set):', notResult.type?.is(deep.Set));
        debug('üîç Not result size:', notResult.size);

        expect(notResult.type.is(deep.Set)).toBe(true);
        debug('‚úÖ deep.Not.to –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç deep.Set');

      } catch (error: any) {
        debug('‚ùå deep.Not failed with (deep.Set, deep.Set):', error.message);

        // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–Ω—è—Ç—å —á—Ç–æ –∏–º–µ–Ω–Ω–æ –æ–∂–∏–¥–∞–µ—Ç Not
        debug('üîç Investigating Not constructor expectations...');
        debug('üîç queryResult._data type:', typeof queryResult._data);
        debug('üîç queryResult._data instanceof Set:', queryResult._data instanceof Set);
        debug('üîç setsForAnd._data type:', typeof setsForAnd._data);
        debug('üîç setsForAnd._data instanceof Set:', setsForAnd._data instanceof Set);
        debug('üîç setsForAnd._data contents:', Array.from(setsForAnd._data));

        // –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ setsForAnd._data
        for (const item of setsForAnd._data) {
          const detected = deep.detect(item);
          debug('üîç setsForAnd item:', item, 'detected:', detected._id, 'type.is(deep.Set):', detected.type?.is(deep.Set));
        }

        throw error;
      }

      debug('üîç === –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û ===');
    });
  });
});

// –≠–¢–ê–ü 2: –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç _not –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
describe('STAGE 2: _not operator test', () => {
  let deep: any;

  beforeEach(() => {
    debug('üß™ Setting up test environment for _not operator');
    deep = newDeep();
  });

  it('should support basic _not operator', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);

    // –¢–µ—Å—Ç: –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–∏–ø–∞ A, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï —è–≤–ª—è—é—Ç—Å—è —Ü–µ–ª—å—é –¥–ª—è —Å–≤—è–∑–µ–π —Ç–∏–ø–∞ C
    // –í makeDataset: c1.to = a2, c2.to = a2
    // –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: a1 (a2 –∏—Å–∫–ª—é—á–∞–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ c1.to = a2, c2.to = a2)
    const result = deep.query({
      type: A,
      _not: {
        in: { type: C }
      }
    });

    debug('üîç _not query result size:', result.size);
    debug('üîç _not query result elements:', Array.from(result).map((e: any) => e._id));

    expect(result.size).toBe(1); // —Ç–æ–ª—å–∫–æ a1
    expect(result.has(a1)).toBe(true);
    expect(result.has(a2)).toBe(false); // a2 –∏—Å–∫–ª—é—á–µ–Ω, —Ç–∞–∫ –∫–∞–∫ c1.to = a2, c2.to = a2

    debug('‚úÖ Basic _not operator works correctly');
  });

  it('should support _not with multiple criteria', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);

    // –¢–µ—Å—Ç: –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–∏–ø–∞ A, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –∏–º–µ—é—Ç (in: { type: C } –ò out: { type: B })
    // –í makeDataset: 
    // - a1.out = {b1, b2} (—Ç–∏–ø B), a1 –ù–ï –∏–º–µ–µ—Ç –≤—Ö–æ–¥—è—â–∏—Ö —Å–≤—è–∑–µ–π —Ç–∏–ø–∞ C
    // - a2 –∏–º–µ–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–≤—è–∑–∏ c1, c2 (—Ç–∏–ø C), a2 –ù–ï –∏–º–µ–µ—Ç –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–≤—è–∑–µ–π —Ç–∏–ø–∞ B
    // 
    // deep.query({ in: { type: C }, out: { type: B } }) –∏—â–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —Å –û–ë–û–ò–ú–ò –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    // –ù–∏ a1, –Ω–∏ a2 –Ω–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—Ç –æ–±–æ–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º ‚Üí –ø—É—Å—Ç–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    // –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–∏–ø–∞ A (a1, a2), —Ç–∞–∫ –∫–∞–∫ –Ω–µ—á–µ–≥–æ –∏—Å–∫–ª—é—á–∞—Ç—å
    const result = deep.query({
      type: A,
      _not: {
        in: { type: C },
        out: { type: B }
      }
    });

    debug('üîç _not multiple criteria result size:', result.size);
    debug('üîç _not multiple criteria result elements:', Array.from(result).map((e: any) => e._id));

    expect(result.size).toBe(2); // a1, a2 (–≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–∏–ø–∞ A)
    expect(result.has(a1)).toBe(true);
    expect(result.has(a2)).toBe(true);

    debug('‚úÖ _not with multiple criteria works correctly');
  });

  it('should support _not with reactive tracking for type changes', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å: –∏—Å–∫–ª—é—á–∏—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–∏–ø–∞ A
    const notTypeAQuery = deep.query({ _not: { type: A } });
    const initialSize = notTypeAQuery.size;

    expect(notTypeAQuery.has(a1)).toBe(false);
    expect(notTypeAQuery.has(a2)).toBe(false);
    expect(notTypeAQuery.size).toBe(deep._ids.size - A.typed.size);

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
    let addedCount = 0;
    let deletedCount = 0;
    notTypeAQuery.on(deep.events.dataAdd, () => addedCount++);
    notTypeAQuery.on(deep.events.dataDelete, () => deletedCount++);

    // –¢–ï–°–¢ 1: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –±–µ–∑ —Ç–∏–ø–∞, –∑–∞—Ç–µ–º —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø B
    const newB = new deep();
    // –°–Ω–∞—á–∞–ª–∞ —ç–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö (–Ω–µ—Ç —Ç–∏–ø–∞ A)
    expect(notTypeAQuery.has(newB)).toBe(true);

    // –¢–µ–ø–µ—Ä—å —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø B - —ç–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    (newB as any).type = B;
    expect(notTypeAQuery.has(newB)).toBe(true);

    // –¢–ï–°–¢ 2: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Ç–∏–ø–∞ A - –æ–Ω –ù–ï –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    const newA = new deep();
    (newA as any).type = A;

    expect(notTypeAQuery.has(newA)).toBe(false);
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –≠–ª–µ–º–µ–Ω—Ç —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–±–µ–∑ —Ç–∏–ø–∞), –ø–æ—Ç–æ–º —É–¥–∞–ª—è–µ—Ç—Å—è (—Å —Ç–∏–ø–æ–º A)
    expect(deletedCount).toBe(1);

    // –¢–ï–°–¢ 3: –ú–µ–Ω—è–µ–º —Ç–∏–ø —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å A –Ω–∞ B - –æ–Ω –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    (a1 as any).type = B;

    expect(notTypeAQuery.has(a1)).toBe(true);
    expect(addedCount).toBe(3); // newB + newA + a1
    expect(deletedCount).toBe(1); // newA
    const sizeAfterA1Change = notTypeAQuery.size;

    // –¢–ï–°–¢ 4: –ú–µ–Ω—è–µ–º —Ç–∏–ø —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å B –Ω–∞ A - –æ–Ω –¥–æ–ª–∂–µ–Ω –∏—Å—á–µ–∑–Ω—É—Ç—å –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    (newB as any).type = A;

    expect(notTypeAQuery.size).toBe(sizeAfterA1Change - 1);
    expect(notTypeAQuery.has(newB)).toBe(false);
    expect(addedCount).toBe(3); // –û—Å—Ç–∞–µ—Ç—Å—è 3
    expect(deletedCount).toBe(2); // newA + newB

    debug('‚úÖ _not with reactive tracking for type changes works correctly');
  });

  it('should support _not with complex nested criteria and tracking', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å: –∏—Å–∫–ª—é—á–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç —Å–≤—è–∑—å from —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Ç–∏–ø–∞ B
    const notFromTypeBQuery = deep.query({ _not: { from: { type: B } } });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    // –í makeDataset: b1.from = a1, b2.from = a1, –≥–¥–µ a1.type = A (–Ω–µ B)
    // –ü–æ—ç—Ç–æ–º—É –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–∏–∫—Ç–æ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω
    const initialSize = notFromTypeBQuery.size;
    expect(notFromTypeBQuery.has(a1)).toBe(true); // a1.from –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    expect(notFromTypeBQuery.has(b1)).toBe(true); // b1.from = a1, a1.type = A (–Ω–µ B)
    expect(notFromTypeBQuery.has(b2)).toBe(true); // b2.from = a1, a1.type = A (–Ω–µ B)

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
    let addedCount = 0;
    let deletedCount = 0;
    notFromTypeBQuery.on(deep.events.dataAdd, () => addedCount++);
    notFromTypeBQuery.on(deep.events.dataDelete, () => deletedCount++);

    // –¢–ï–°–¢ 1: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–≤—è–∑—å - –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç —Ç–∏–ø–∞ B
    const newElement = new deep();
    (newElement as any).type = C;
    (newElement as any).from = b1; // b1 –∏–º–µ–µ—Ç —Ç–∏–ø B

    expect(notFromTypeBQuery.has(newElement)).toBe(false); // –ù–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏—Å–∫–ª—é—á–µ–Ω
    expect(deletedCount).toBe(1); // –≠–ª–µ–º–µ–Ω—Ç —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–∏–ª—Å—è, –ø–æ—Ç–æ–º —É–¥–∞–ª–∏–ª—Å—è

    // –¢–ï–°–¢ 2: –ú–µ–Ω—è–µ–º from —É newElement —Å b1 –Ω–∞ a1 - —ç–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    (newElement as any).from = a1; // a1.type = A (–Ω–µ B)

    expect(notFromTypeBQuery.has(newElement)).toBe(true);
    expect(addedCount).toBe(2); // newElement –¥–æ–±–∞–≤–∏–ª—Å—è –¥–≤–∞–∂–¥—ã

    // –¢–ï–°–¢ 3: –ú–µ–Ω—è–µ–º —Ç–∏–ø a1 –Ω–∞ B - —Ç–µ–ø–µ—Ä—å —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Å—ã–ª–∞—é—â–∏–µ—Å—è –Ω–∞ a1 –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω—ã
    (a1 as any).type = B;

    expect(notFromTypeBQuery.has(b1)).toBe(false); // b1.from = a1, —Ç–µ–ø–µ—Ä—å a1.type = B
    expect(notFromTypeBQuery.has(b2)).toBe(false); // b2.from = a1, —Ç–µ–ø–µ—Ä—å a1.type = B
    expect(notFromTypeBQuery.has(newElement)).toBe(false); // newElement.from = a1, —Ç–µ–ø–µ—Ä—å a1.type = B
    expect(deletedCount).toBe(4); // –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ newElement + b1, b2, newElement

    debug('‚úÖ _not with complex nested criteria and tracking works correctly');
  });

  it('should support _not with value chain tracking', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å: –∏—Å–∫–ª—é—á–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç value —Å—Å—ã–ª–∞—é—â–∏–π—Å—è –Ω–∞ —Å—Ç—Ä–æ–∫—É
    const notValueStringQuery = deep.query({ _not: { value: { type: deep.String } } });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const initialSize = notValueStringQuery.size;
    expect(notValueStringQuery.has(d1)).toBe(false); // d1.value = str (str –∏–º–µ–µ—Ç —Ç–∏–ø deep.String)
    expect(notValueStringQuery.has(d2)).toBe(false); // d2.value = str (str –∏–º–µ–µ—Ç —Ç–∏–ø deep.String)

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
    let addedCount = 0;
    let deletedCount = 0;
    notValueStringQuery.on(deep.events.dataAdd, () => addedCount++);
    notValueStringQuery.on(deep.events.dataDelete, () => deletedCount++);

    // –¢–ï–°–¢ 1: –£–¥–∞–ª—è–µ–º value —É d1 - –æ–Ω –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    delete (d1 as any).value;

    expect(notValueStringQuery.size).toBe(initialSize + 1);
    expect(notValueStringQuery.has(d1)).toBe(true);
    expect(addedCount).toBe(1);

    // –¢–ï–°–¢ 2: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å value –Ω–∞ —Å—Ç—Ä–æ–∫—É - –æ–Ω –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    const newD = new deep();
    (newD as any).type = D;
    (newD as any).value = str;

    expect(notValueStringQuery.size).toBe(initialSize + 1); // –†–∞–∑–º–µ—Ä –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
    expect(notValueStringQuery.has(newD)).toBe(false);
    expect(addedCount).toBe(2); // d1 + newD (–∫–æ—Ç–æ—Ä—ã–π —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–∏–ª—Å—è, –ø–æ—Ç–æ–º —É–¥–∞–ª–∏–ª—Å—è)

    // –¢–ï–°–¢ 3: –ú–µ–Ω—è–µ–º —Ç–∏–ø str —Å deep.String –Ω–∞ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ - d2 –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    const originalStringType = str.type;
    (str as any).type = C;

    expect(notValueStringQuery.has(d2)).toBe(true);
    expect(notValueStringQuery.has(newD)).toBe(true); // newD —Ç–æ–∂–µ —Ç–µ–ø–µ—Ä—å –Ω–µ –∏—Å–∫–ª—é—á–µ–Ω
    expect(addedCount).toBe(4); // d1 + newD (–ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ) + d2 + newD (–ø–æ–≤—Ç–æ—Ä–Ω–æ)

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø —Å—Ç—Ä–æ–∫–∏
    (str as any).type = originalStringType;

    debug('‚úÖ _not with value chain tracking works correctly');
  });

  it('should support _not with empty criteria (should exclude everything)', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);

    // –ó–∞–ø—Ä–æ—Å —Å –ø—É—Å—Ç—ã–º _not –¥–æ–ª–∂–µ–Ω –∏—Å–∫–ª—é—á–∏—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—Ç –ø—É—Å—Ç–æ–º—É –∑–∞–ø—Ä–æ—Å—É
    // –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å {} –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –ø–æ—ç—Ç–æ–º—É _not: {} –¥–æ–ª–∂–µ–Ω –∏—Å–∫–ª—é—á–∏—Ç—å –≤—Å–µ
    const notEmptyQuery = deep.query({ _not: {} });

    expect(notEmptyQuery.size).toBe(0);
    expect(notEmptyQuery.has(a1)).toBe(false);
    expect(notEmptyQuery.has(b1)).toBe(false);
    expect(notEmptyQuery.has(str)).toBe(false);

    debug('‚úÖ _not with empty criteria works correctly');
  });

  it('should support multiple _not operators (intersection of exclusions)', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);

    // –°–æ–∑–¥–∞–µ–º –¥–≤–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö _not –∑–∞–ø—Ä–æ—Å–∞
    const notTypeAQuery = deep.query({ _not: { type: A } });
    const notTypeBQuery = deep.query({ _not: { type: B } });

    // –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–∏–ø–∞ A –ò —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–∏–ø–∞ B
    const intersectionQuery = notTypeAQuery.intersection(notTypeBQuery);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤–º–µ—Å—Ç–æ —Ç–æ—á–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    expect(intersectionQuery.has(a1)).toBe(false); // –ò—Å–∫–ª—é—á–µ–Ω –∫–∞–∫ —Ç–∏–ø A
    expect(intersectionQuery.has(a2)).toBe(false); // –ò—Å–∫–ª—é—á–µ–Ω –∫–∞–∫ —Ç–∏–ø A
    expect(intersectionQuery.has(b1)).toBe(false); // –ò—Å–∫–ª—é—á–µ–Ω –∫–∞–∫ —Ç–∏–ø B
    expect(intersectionQuery.has(c1)).toBe(true);  // –ù–µ –∏—Å–∫–ª—é—á–µ–Ω
    expect(intersectionQuery.has(d1)).toBe(true);  // –ù–µ –∏—Å–∫–ª—é—á–µ–Ω

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–∞–∑–º–µ—Ä –±–æ–ª—å—à–µ 0 (–µ—Å—Ç—å –Ω–µ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã)
    expect(intersectionQuery.size).toBeGreaterThan(0);

    debug('‚úÖ multiple _not operators work correctly');
  });

  it('should support _not with performance on large datasets', () => {
    const { A, B, C, D } = makeDataset(deep);

    // –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–æ–π –¥–∞—Ç–∞—Å–µ—Ç
    const largeDataset: any[] = [];
    const DATASET_SIZE = 1000;

    for (let i = 0; i < DATASET_SIZE; i++) {
      const element = new deep();
      const typeIndex = i % 4;
      (element as any).type = [A, B, C, D][typeIndex];
      largeDataset.push(element);
    }

    const startTime = Date.now();

    // –°–æ–∑–¥–∞–µ–º _not –∑–∞–ø—Ä–æ—Å –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ç–∏–ø–∞ A
    const notTypeAQuery = deep.query({ _not: { type: A } });

    const queryTime = Date.now() - startTime;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    const expectedExcluded = Math.ceil(DATASET_SIZE / 4); // –ü—Ä–∏–º–µ—Ä–Ω–æ 1/4 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ç–∏–ø–∞ A
    const actualSize = notTypeAQuery.size;
    const totalElements = deep._ids.size;

    // –†–∞–∑–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–ª–∏–∑–æ–∫ –∫ –æ–∂–∏–¥–∞–µ–º–æ–º—É (—Å —É—á–µ—Ç–æ–º –∏—Å—Ö–æ–¥–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–∞—Ç–∞—Å–µ—Ç–∞)
    expect(actualSize).toBeGreaterThan(totalElements - expectedExcluded - 10);
    expect(actualSize).toBeLessThan(totalElements);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–¥–æ–ª–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è –±—ã—Å—Ç—Ä–æ)
    expect(queryTime).toBeLessThan(5000); // –ú–µ–Ω–µ–µ 5 —Å–µ–∫—É–Ω–¥

    debug(`‚úÖ _not performance test: ${actualSize} elements, ${queryTime}ms`);
  });

  it('should support _not with destruction tracking', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å: –∏—Å–∫–ª—é—á–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–∏–ø–∞ A
    const notTypeAQuery = deep.query({ _not: { type: A } });
    const initialSize = notTypeAQuery.size;

    expect(notTypeAQuery.has(a1)).toBe(false);
    expect(notTypeAQuery.has(b1)).toBe(true);

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
    let addedCount = 0;
    notTypeAQuery.on(deep.events.dataAdd, () => addedCount++);

    // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Ç–∏–ø–∞ A - —ç—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã _not –∑–∞–ø—Ä–æ—Å–∞
    // (—ç–ª–µ–º–µ–Ω—Ç —É–∂–µ –±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω)
    a1.destroy();

    expect(notTypeAQuery.size).toBe(initialSize); // –†–∞–∑–º–µ—Ä –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
    expect(addedCount).toBe(1); // a1 –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –∏ –∏—Å–∫–ª—é—á–µ–Ω
    expect(notTypeAQuery.has(a1)).toBe(false);

    // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –ù–ï —Ç–∏–ø–∞ A - –æ–Ω –¥–æ–ª–∂–µ–Ω –∏—Å—á–µ–∑–Ω—É—Ç—å –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const beforeDestroySize = notTypeAQuery.size;
    expect(notTypeAQuery.has(b1)).toBe(true);

    b1.destroy();

    expect(notTypeAQuery.size).toBe(beforeDestroySize);
    expect(notTypeAQuery.has(b1)).toBe(false);

    debug('‚úÖ _not with destruction tracking works correctly');
  });

  it('should support _not with complex multi-level nesting', () => {
    const { A, a1, a2, B, b1, b2, C, c1, c2, D, d1, d2, str } = makeDataset(deep);

    // –°–æ–∑–¥–∞–µ–º —Å–ª–æ–∂–Ω—ã–π –≤–ª–æ–∂–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å:
    // –ò—Å–∫–ª—é—á–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç from, –∫–æ—Ç–æ—Ä—ã–π –∏–º–µ–µ—Ç type A
    const complexNotQuery = deep.query({
      _not: {
        from: {
          type: A
        }
      }
    });

    // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω—ã
    // –ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö from.type = A
    let excludedCount = 0;
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤–º–µ—Å—Ç–æ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø–æ –≤—Å–µ–º ID
    const testElements = [a1, a2, b1, b2, c1, c2, d1, d2, str, A, B, C, D];
    for (const element of testElements) {
      if (element._from) {
        const fromElement = new deep(element._from);
        if (fromElement._type === A._id) {
          excludedCount++;
        }
      }
    }

    const expectedSize = deep._ids.size - excludedCount;
    expect(complexNotQuery.size).toBe(expectedSize);

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
    let changeCount = 0;
    complexNotQuery.on(deep.events.dataAdd, () => changeCount++);
    complexNotQuery.on(deep.events.dataDelete, () => changeCount++);

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–≤—è–∑—å: –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç -> —ç–ª–µ–º–µ–Ω—Ç —Ç–∏–ø–∞ A
    const newElement = new deep();
    (newElement as any).type = C;
    (newElement as any).from = a2; // a2 –∏–º–µ–µ—Ç —Ç–∏–ø A

    // –ù–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    expect(complexNotQuery.has(newElement)).toBe(false);
    expect(changeCount).toBe(2); // –≠–ª–µ–º–µ–Ω—Ç —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–∏–ª—Å—è, –ø–æ—Ç–æ–º —É–¥–∞–ª–∏–ª—Å—è

    // –ú–µ–Ω—è–µ–º from –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç –ù–ï —Ç–∏–ø–∞ A
    (newElement as any).from = c1; // c1 –∏–º–µ–µ—Ç —Ç–∏–ø C

    // –¢–µ–ø–µ—Ä—å —ç–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    expect(complexNotQuery.has(newElement)).toBe(true);
    expect(changeCount).toBe(3); // –ü—Ä–µ–¥—ã–¥—É—â–∏–µ 2 + –µ—â–µ 1 –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ

    debug('‚úÖ _not with complex multi-level nesting works correctly');
  });
});