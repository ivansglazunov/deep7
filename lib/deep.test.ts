import { Deep, deep } from './';

describe('deep', () => {
  it('() unpacking data', () => {
    const a = deep();
    const b = deep();
    expect(a).toBe(b);
    expect(a).toBe(deep.symbol);
    expect(b).toBe(deep.symbol);
  });
  it('new () creation', () => {
    const a = deep();
    const b = new deep();
    const c = new deep();
    expect(a).toBe(deep.symbol);
    expect(b).not.toBe(c);
    expect(b.symbol).not.toBe(c.symbol);
    expect(b.prev).toBe(deep.symbol);
    expect(b.prevBy).toBe(deep.construct);
    expect(c.prev).toBe(deep.symbol);
    expect(c.prevBy).toBe(deep.construct);
  });
  it('new () context', () => {
    const a = new deep();
    const b = new a();
    const c = new a();
    expect(b.context).not.toBe(c.context);
    a.context.x = 1;
    expect(b.x).toBe(1);
    expect(c.x).toBe(1);
    b.context.y = 2;
    expect(b.y).toBe(2);
    expect(c.y).not.toBe(2);
    expect(a.prev).toBe(deep.symbol);
    expect(b.prev).toBe(a.symbol);
    expect(c.prev).toBe(a.symbol);
    expect(a.prevBy).toBe(deep.construct);
    expect(b.prevBy).toBe(deep.construct);
    expect(c.prevBy).toBe(deep.construct);
  });
  it('() context', () => {
    const A = new deep();
    expect(A.prev).toBe(deep.symbol);
    expect(A.prevBy).toBe(deep.construct);
    expect(A instanceof Deep).toBe(true);
    expect(A.this).toBe(deep.this);
    A.x = 1;
    expect(A.x).toBe(1);
    const a = new A();
    expect(a.this).toBe(A.this);
    expect(a.x).toBe(1);
    const B = new deep();
    expect(B.this).toBe(deep.this);
    B.x = 2;
    a.context = B.context;
    expect(a.x).toBe(2);
    expect(a.prev).toBe(A.symbol);
    expect(a.prevBy).toBe(deep.construct);
  });
  it('new () context', () => {
    const A = new deep();
    expect(A instanceof Deep).toBe(true);
    expect(A.this).toBe(deep.this);
    A.x = 1;
    expect(A.x).toBe(1);
    const a = new A();
    expect(a.this).toBe(A.this);
    expect(a.x).toBe(1);
    const B = new deep();
    expect(B.this).toBe(deep.this);
    B.x = 2;
    a.context = B.context;
    expect(a.x).toBe(2);
    expect(A.x).toBe(1);
  });
  it('new () many contexts', () => {
    const A = new deep();
    const B = new A();
    const C = new B();
    A.x = 1;
    B.y = 2;
    C.z = 3;
    expect(C.z).toBe(3);
    expect(C.y).toBe(2);
    expect(C.x).toBe(1);
    expect(A.prev).toBe(deep.symbol);
    expect(B.prev).toBe(A.symbol);
    expect(C.prev).toBe(B.symbol);
  });
});
